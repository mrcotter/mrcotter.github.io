<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[以「光」为主题的色彩艺术动画]]></title>
    <url>%2Fposts%2F6427ea10%2F</url>
    <content type="text"><![CDATA[本期视频名为 Ringling Future Proof Titles，来自于一周前在瑞格林艺术与设计学院（Ringling College of Art and Design）举办的年度动效设计大会（Motion Design Conference）开场介绍视频。作者 Joshua Galindo，以「光」为主题，出色地将声音、形状、变化、色彩和光影相结合，展现了非凡的创造力。下面，请欣赏。 Ringling Future Proof Titles 大陆访客请点击访问 B 站视频 (￣３￣)a 大家可以到作者的 Vimeo 主页上欣赏其它作品，都很不错。下期再见，Peace!]]></content>
      <categories>
        <category>好玩</category>
      </categories>
      <tags>
        <tag>动效设计</tag>
        <tag>动画</tag>
        <tag>日艺术</tag>
        <tag>光</tag>
        <tag>Vimeo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[没有胶卷的随拍 - 深秋的红叶、黄叶]]></title>
    <url>%2Fposts%2F922fe2db%2F</url>
    <content type="text"><![CDATA[这个秋天的悉尼格外的冷，而每年的这个时候，去到悉尼周边的不少地区都能看到如画般的红色枫叶，还有如鎏金般即将掉落的黄叶。观赏红叶的最佳地点在 Blue Mountains 蓝山国家公园附近的区域，比较著名的有 Mt Wilson（威尔逊山），离悉尼市中心约 2 小时车程。周围还有 Mt Tomah Botanic Garden、Blackheath、Leura、Wentworth Falls 等也是欣赏红叶的好去处。我的这次赏叶之旅比预计的晚了 2 周，因为朋友一直很忙，抽不出时间。最后我们选择去 Wentworth Falls，其实并不是一个好的选择，小镇很小，能看到的红叶也很少，而瀑布在这个季节的水量也少，远没有相象中那么壮观。幸好，我也抓拍到了几个不错的瞬间。在这个吹着瑟瑟寒风的秋天，走在乡间小路上，看着美景，留下了自己的足迹。 秋 - 红叶 秋 - 黄叶 那么，下次拍了好看的照片再分享给大家。Peace！]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>悉尼</tag>
        <tag>Sydney</tag>
        <tag>Wentworth Falls</tag>
        <tag>蓝山</tag>
        <tag>红叶</tag>
        <tag>黄叶</tag>
        <tag>秋天</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[5个前端动效实例分享（04/2018）]]></title>
    <url>%2Fposts%2F3a090389%2F</url>
    <content type="text"><![CDATA[CodePen 是优秀前端动效设计作品的集中地，这里就如同是程序猿版本的 Dribbble，你可以自由地翻阅和借鉴优秀作品，发掘好的代码甚至设计的前沿。和此前一样，我精选了 6 个优秀的作品，其中有一些运用到了 three.js 和 WebGL 技术用于绘制 3D 图形，值得学习。 Only CSS: Rolling Box WebGL particles + noise displacement cube twist with CSS vars Random Cubes Burst Loader 下期见，Peace！]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>JavaScript</tag>
        <tag>前端开发</tag>
        <tag>动效设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[没有胶卷的随拍 - 南天寺和凯马喷水洞]]></title>
    <url>%2Fposts%2F565addd5%2F</url>
    <content type="text"><![CDATA[前段时间趁着表弟的爸妈来悉尼玩，陪他们一家去了位于悉尼南约 100 公里的卧龙岗市（Wollongong）附近的南天寺（Nan Tien Temple），美其名曰「参佛」，顺便尝尝斋饭。表弟的爸妈有修佛的习惯，早年和他们去过一趟泰国的清迈，也陪着逛了不少当地大大小小的寺庙。南天寺号称南半球最大的寺庙，1992 年动工，1995 年竣工。占地 55 英亩，建筑面积达 11000 平方米。其中的大雄宝殿、大悲殿和灵山塔等建筑都是中国宫殿式造型，外观给人一种雄伟壮丽的感觉，走入殿内，供奉的佛像和堆砌的佛牌也额外显得金碧辉煌。去时的季节正为夏末，天气舒适宜人，当天前来的游客和信徒众多，而寺院的内外均绿树环绕、加上毗邻大海，景色格外秀丽。我虽没有真正的参佛之心，不过也跟着他们燃香行礼，对着佛祖悄悄地述说心中的祈愿。中午吃过斋饭，我们一群人继续南下，到达 Kiama 的一个观景点看喷水洞（Blowhole Point），旁边还有座白色的灯塔，不知到了晚上会否发出光芒，照亮远方。 南天寺 Nan Tien Temple 凯马喷水洞 Kiama Blowhole Point 拍的喷水视频就懒得找地方上传了。那么，下次出去玩，拍了照片再分享了。Peace！]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>悉尼</tag>
        <tag>卧龙岗</tag>
        <tag>Sydney</tag>
        <tag>Wollongong</tag>
        <tag>Kiama</tag>
        <tag>Blowhole</tag>
        <tag>喷水洞</tag>
        <tag>南天寺</tag>
        <tag>Nan Tien Temple</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对 iPad 2018、小米 MIX 2S 和游戏本、华为 P20 的一些看法]]></title>
    <url>%2Fposts%2F11b07505%2F</url>
    <content type="text"><![CDATA[2018 年 3 月 27 日，也就是昨天，我们看到了来自 Apple、小米和华为召开的 3 场发布会，他们各自都带来了不少新品。其中，Apple 仅带来了一款新硬件「The New iPad 2018」，即支持 Apple Pencil 的新款入门级 iPad，之前多家媒体传闻的新款 MacBook 和 MacBook Pro 系列没有出现在发布会中，颇令我失望（我是真的很想换掉手中的15寸 MBP Retina Late 2013）。当然，小米和华为也展开了对 Apple 的夹击攻势。小米发布会上的 3 款产品，有不到半年就更新的旗舰机型 MIX 2S、新的电竞游戏本，以及小爱音响 Mini（对这个毫无兴趣），而华为发布会的主角自然是 P20 和 P20 Pro 系列手机了。 我自己平时也经常关注电子产品的动态，加上今年计划更新一堆生产力工具，包括换掉我现在还在用的 iPhone 6s、前面提到的15寸 MacBook Pro Retina Late 2013。当然我还有个 iPad Mini 2，偶尔翻出来看看电子书什么的，除此之外，现在平板对我个人来说意义不大，就不打算换新了。因为经常看一些评测，所以感觉自己对这些电子产品其实蛮挑剔的，一个观察，没有什么完美的产品，一是其价格对应的市场，二是有目的地预留改进空间，每个产品除了在其宣传上包装华丽的各种优点，都有值得吐槽的地方。这次，我也简单说说在看过这些发布会和一些第一手视频介绍后的简单想法，也附上一些不错的油管视频供大家参考。 Apple New iPad 2018 可以非常肯定地说，Apple 此次的发布会和往年有很大的不同，重点不在硬件方面，而是投入到教育市场。据媒体报道，过去的六年时间，Apple 在美国教育市场的硬件份额已从六年前的 50% 降至不足 20%，Google 早已甩 Apple 好几条街的距离。而就在前几天，Google 与宏碁合作发布了第一款搭载 Chrome OS 的平板电脑。因此，Apple 很想在教育市场有所突破，除了此次平价版 iPad 提供教育优惠价格之外，还介绍了第一款罗技 Logitech 制造的第三方 Pencil，毕竟个人觉得需要单独购买的 Apple Pencil 死贵，特别是那些不从事设计、绘画行业的人员来说，Pencil 的使用很有限。 当然，新款 iPad 并没有完全提供如同 iPad Pro 那样的功能，下面的表格会提供一些参数对比： 没有提供 Smart Connecter，即无法和 Smart Keyboard 配合使用，屏幕也没有使用抗反射图层（会有很明显的反光效应），没有提供 True Tone 的支持等等。澳洲地区拥有 Wi-Fi 和 Wi-Fi + Cellular 两个版本，容量有 32GB 和 128GB 两个选择，起售价为 A$469，教育优惠价便宜 30 刀，起售价 A$439。 来自 The Verge 的上手视频 大陆访客请点击访问 B 站视频 (￣３￣)a 目前我对 iPad 产品线关注不多，从个人实用性的角度出发，平板类产品在短期内都不会纳入购买计划。而对从事相关行业的人来说，此次 iPad 不仅价格便宜了不少，还支持 Apple Pencil 和第三方触控笔，还是可以考虑入手的。 Mi MIX 2S 和游戏本 小米 MIX 2S 的参数是很诱人的，搭载晓龙 Snapdragon 845，海外机型只有顶配，提供 8GB 内存 + 256GB 机身存储，采用四曲面精密陶瓷，以上描述来自官方介绍。加上全面屏设计、“所谓”的 AI 双摄、AI 人脸解锁和场景识别相机、支持 Qi 标准的无线快充等等，MIX 2S 整体上看来是不错的。 来自 The Verge 的上手视频 大陆访客请点击访问 B 站视频 ╮(￣▽￣)╭ 另外一款则是颇为豪华的游戏本正式登场，颜值和配置都不错，共 2 款：i7-7700HQ / GTX 1060 / 16GB / 256GB + 1TB 售价 RMB 8999元；i5-7300HQ / GTX 1050 Ti / 8GB / 128GB + 1TB 售价 RMB 5999元。从发布会 PPT 来看，其散热系统是很优秀的设计。因为其相对低调的外观设计，官方说主打「可以带去上班」，我认为不行，原因是太重了…..这也算是它的槽点之一，优秀的一堆参数中，2.7 kg 的重量实在不方便背着出门。另外，屏幕的素质也很普通，相对的，售价却不低，小米的产品素来性价比不错，这次高配售价达到 8999 元，而且并没有使用 Intel 第 8 代处理器，个人觉得有点不值。 来自 Dave Lee 对小米游戏本的简评 大陆访客请点击访问 B 站视频 (￣.￣) 如果想要购买，建议等到正式上市后，看过一些权威的测试结果再说。小米的毛病在于产品的宣传 PPT 会夸大事实，让人觉得很美好，最后的实物就….我印象最深的一次是之前的「15寸小米笔记本 Pro」，到现在为止，官网的图片让你感觉是非常轻薄的设计，类似 MacBook Pro，然而实物底部却厚了近乎一倍。另外，MIUI 我虽然很久没有碰过，不过周围使用小米手机的朋友都觉得不太好用。而我自己关注的更多的是其相机拍摄的实际效果，猜测最后测试的结果会逊于其它旗舰手机，所以对于 MIX 2S，我持谨慎选择的态度。 华为 P20 系列虽然华为在国内市场的表现不错，不过自己一直不太喜欢这个品牌的手机，大概是基于其早期 Android 手机的糟糕体验，以及有点反感现在过度宣传和堆砌不实用的技术参数。官方宣传的重点一是颜值，二是三摄像头组合。首先就吐槽一下颜值，虽然 P20 也被称为全面屏手机，但是官方发布会的各种图片都尽可能多地隐藏了手机正面下方的部分，就是那个很大的长方形圆角 Home Button，让你尽可能多看“美美”的背面。个人观点，有个按钮在正面都不算是全面屏好吧！至于背面的徕卡三摄像头，P20 Pro 的主摄像头更是用了 4000 万像素，在其它旗舰手机还在使用 1800 万像素左右镜头的时候，这是一个很夸张的参数。DXOMark 的评分我已经没有很大的信任感了，等实机评测比较好。 来自 Andorid Authority 的上手视频 大陆访客请点击访问 B 站视频 (￣⊥￣) 华为的 P 系列和 Honor 荣耀系列一样，在功能和设计上有着更多实验意味，例如此次率先使用三摄配置。之后通过实际表现和市场反馈，成熟的设计再移植到高端的 Mate 系列中去。性能上嘛，自家研发的麒麟 970 处理器没有研究过。颜值嘛，除了不想再黑正面硕大的按钮，背后的镜头组和 iPhone X、小米 MIX 2S 并没有不同，加上正面的刘海 notch 跟风设计，无爱…… 好了，这就是我对昨天几场发布会的观后感。如果你对这些产品有什么看法，欢迎留言，下次见，Peace！]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>Apple</tag>
        <tag>iPad</tag>
        <tag>苹果</tag>
        <tag>小米</tag>
        <tag>Xiaomi</tag>
        <tag>手机</tag>
        <tag>华为</tag>
        <tag>Huawei</tag>
        <tag>P20</tag>
        <tag>游戏本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一起追剧 - 「Unnatural」与「总觉得邻家更幸福」]]></title>
    <url>%2Fposts%2Fb906f0cc%2F</url>
    <content type="text"><![CDATA[2018 冬季播出的日剧已陆续接近尾声，在这一季里，个人最喜欢的有 2 部：「Unnatural アンナチュラル」与「总觉得邻家更幸福 隣の家族は青く見える」。第一部「Unnatural」是以法医作为女主角三澄美琴（石原里美饰）的职业背景，围绕着一个个“非正常”死亡事件展开的故事。此剧虽然是法医题材，然而并没有什么血腥的场景，也不需要传统的恋爱桥段，配合日剧常见的揭露社会热点发人深省的一贯特点，无形中深深地吸引了我。不得不提的是，本剧的主题曲，由米津玄師演唱的「Lemon」非常非常好听，每集片尾配上这段音乐，感人至深、泪流满面。第二部「总觉得邻家更幸福 」是一部家庭剧，故事的内容就如同标题想要表达的那样，每个看起来幸福美满的家庭，而背后，家家都有本难念的经。在这部剧中，4 个家庭 4 种不一样的经历和故事，会让很多人有很强的代入感，从而产生共鸣。 「Unnatural」故事简介在“非自然死亡原因研究所”（简称“UDI”）工作的三澄美琴（石原里美饰）是专门探查死者死因的解剖医生。她最不能容忍的是对“非自然死亡”不闻不问。在她看来，“非自然”的背后必定有着需要法医来追究的真相，比如伪装杀人、医疗失误、未知的疑难疾病等等。然而，在日本，很多非自然死亡的死者都未经解剖就火化了。美琴与她那些个性鲜明的同事们一起，向这样的现实发起了挑战 。 预告片 大陆访客请点击访问 B 站视频 (￣３￣)a 主题曲 - 米津玄師 「Lemon」 大陆访客请点击访问 B 站视频 ╮(￣▽￣)╭ 「总觉得邻家更幸福 」故事简介五十岚奈奈（深田恭子饰）是个活泼的有氧潜水教练，她的丈夫大器（松山健一饰）在玩具工厂上班。大器心地善良，但作为丈夫却有一点点不可靠。夫妇二人住在小公寓里，为了能买房而存钱。大器的母亲希望早日抱上孙子，奈奈和大器却很享受二人世界。后来，以购入居民集体设计小区住宅为契机，这对夫妇开始了“造人计划”，但没有成功。他们这才意识到生孩子是不是件轻而易举的事，于是，奈奈和大器开始了艰难的怀孕活动。除了怀孕之路困难重重之外，五十岚的身边还有“想要小孩的情侣”、“离婚男与不想要小孩的妻子”、“男同志情侣”、“追求理想家庭的主妇与家里蹲丈夫”等各种各样的家庭，家家都有一本难念的经 。 预告片 大陆访客请点击访问 B 站视频 (￣.￣) 很有意思的 OP 这部剧我已经追到倒数第二集了，其实往后看心里蛮压抑的，故事中有同性恋、少子化、中年失业、不孕不育、婚姻危机等等问题，而我们都可能会在现实生活中需要面对。不过不要误会，看这部剧总体上是很温暖的，人不能放弃希望，两个人要一起好好地走下去。 那么，下次有好看的电影或者电视剧我再分享，Peace！]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>电视剧</tag>
        <tag>日剧</tag>
        <tag>剧情</tag>
        <tag>悬疑</tag>
        <tag>家庭</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全站启用 HTTPS，Nginx 反向代理部署 Angular 5 Web App]]></title>
    <url>%2Fposts%2F3cd67903%2F</url>
    <content type="text"><![CDATA[其实从好几年之前整个互联网就开始将 WEB 服务从 HTTP 迁移到 HTTPS，而现在为了更快的推进 HTTPS 的普及，Chrome 将从 2018 年 7 月起标记所有的 HTTP 网站为不安全链接。从这一点来说，我是支持的，HTTPS 会逐渐成为 WEB 服务的标配，最最重要的是，它能给用户带来更安全、更好隐私保护的网络体验。具体来说，防止网站数据在网络传输中被窃听和篡改。一个典型的例子就是国内的宽带运营商劫持，强行在用户访问网站的时候嵌入广告、修改页面、甚至强行跳转。而一些 HTML5 API 可以用来获取用户地理位置、摄像头音视频等隐私数据。尽管网站在使用这些权限前需要获得用户授权，但由于 HTTP 很容易被劫持，通过 HTTP 传输这些隐私数据将会十分危险。因此，我建议大家尽早升级，现在通过 Let’s Encrypt 获取免费证书很容易，虽然证书只有 90 天有效期，只需要一个简单的脚本就能自动更新。 这篇文章主要记录自己的博客站以及运行在 VPS 上的 Angular 5 Web App 启用 HTTPS 的过程和一些经验，分享给大家。 我的博客如果博客构建在 GitHub Pages，启用 HTTPS 分两种情况： 无自定义域名，那么 GitHub 已经支持默认域名 *.github.io 启用强制 HTTPS 连接，在 repo 的设置中就可以打开； 自定义域名，例如我的博客域名为 kris2d.info，需借助 Cloudflare 提供的免费 CDN 服务，为博客开启 HTTPS 支持，同时也提供 HTTP/2 的支持。 设置 Nameserver将域名的 Nameserver 指向 Cloudflare 提供给你的 Nameserver，例如我的设置如下（子域名 crypto 是我的 Web App 在使用）： 开启 SSL在 Cloudflare 的站点管理页面，切换到 Crypto 标签页，将 SSL 的模式设置为 Full，如下图所示： 注意不能设为 Full (strict)，现在该域名就可以支持 HTTPS 访问了。但是你会发现，如果直接输入域名，浏览器仍然默认以 HTTP 协议来访问，并不会自动跳转到 HTTPS。 HTTPS 跳转Cloudflare 提供一个名叫 Page Rules 页面规则的功能，可以匹配不同规则的 URL 做一些处理。切换至 Pages Rules 标签页，新建如下规则： 完成后点击 Save and Deploy，至此，博客站就实现了全站 HTTPS 安全连接。需要提醒的是，博客中如果使用外链的图片，也必须为 HTTPS 链接，否则 Chrome 等浏览器会有 Mixed Content 错误提示。而一些社区分享插件也不支持 HTTPS，同样需要禁用才能消除错误提示。 Angular 5 Web App我的这个 App 算是练手用项目，就没有再申请新的域名，使用的是子域名 crypto.kris2d.info。自己有一个 VPS，运行 Ubuntu Server 17.10，搭建环境为 http-server、PM2、以及 Nginx 作反向代理。申请 Let’s Encrypt 使用 Certbot，根据提示就可以获得免费的 SSL 证书，添加到 Nginx Site Conf 中就可以了。 先决条件 Ubuntu 中安装 node.js 和 npm 123sudo apt-get updatesudo apt-get install nodejssudo apt-get install npm 安装 http-server 和 PM2 12npm install http-server -gnpm install pm2 -g 这里，我们就可以在任意目录创建一个 PM2 可以读取的 json 文件，用于 http-server 的不间断运行。这里我设置静态服务器的监听端口为 3000，文件另存为 procee.json： 12345678910&#123; "apps": [ &#123; "name": "angular", "cwd": "/var/www/crypto.kris2d.info/dist", "args": "-p 3000 -d false", "script": "/usr/local/lib/node_modules/http-server/bin/http-server" &#125; ]&#125; 之后，只要运行 pm2 start /path/to/process.json，Angular App 就开始正常运行了。 编译 Nginx我没有直接使用 Ubuntu 系统库中的 Nginx，而是使用 nginx-autoinstall 来安装附带额外功能的版本，例如通过编译新版本的 OpenSSL 从而支持 HTTP/2、ChaCha20 cipher 等，同时打上了 Cloudflare’s TLS Dynamic Records Resizing patch 补丁。 123wget https://raw.githubusercontent.com/Angristan/nginx-autoinstall/master/nginx-autoinstall.shchmod +x nginx-autoinstall.sh./nginx-autoinstall.sh 按照提示，分别选择 Stable 版本，Modules 中选择了 Brotli、GeoIP 和 Cloudflare&#39;s TLS Dynamic Records Resizing patch，在 OpenSSL 中选择 OpenSSL from source 等待完成即可。最后添加基本的 Nginx 站点配置文件，例如我的站点，增加一个配置文件，位于 /etc/nginx/sites-available/crypto.kris2d.info，并且创建一个 symbolic link 到 /etc/nginx/sites-enabled/crypto.kris2d.info。 获取 Let’s Encrypt 证书 安装 Certbot 12345sudo apt-get updatesudo apt-get install software-properties-commonsudo add-apt-repository ppa:certbot/certbotsudo apt-get updatesudo apt-get install python-certbot-nginx 获取当前域名的免费 SSL 证书 1sudo certbot --nginx -d crypto.kris2d.info 按照提示同意条款并输入邮箱地址，最后的提示 Redirect 自动配置可以随意选择，之后会修改。完成后，记录好证书和 conf 文件的位置，默认情况下，证书位于 /etc/letsencrypt/ 目录中。 Nginx 反向代理部署 Angular 5目前 App 是运行在 http-server 上的，由 Nginx 作反向代理，完整的站点配置如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374upstream node_server &#123; server 127.0.0.1:3000;&#125;server &#123; listen 80; server_name crypto.kris2d.info; root /var/www/crypto.kris2d.info/dist; if ($request_method !~ ^(GET|HEAD|POST)$ ) &#123; return 444; &#125; location / &#123; rewrite ^/(.*)$ https://crypto.kris2d.info/$1 permanent; &#125;&#125;server &#123; listen 443 ssl http2 fastopen=3 reuseport; server_name crypto.kris2d.info; server_tokens off; root /var/www/crypto.kris2d.info/dist; ssl_certificate /etc/letsencrypt/live/crypto.kris2d.info/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/crypto.kris2d.info/privkey.pem; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot ssl_session_tickets on; ssl_stapling on; ssl_stapling_verify on; resolver 8.8.4.4 8.8.8.8 valid=300s; resolver_timeout 10s; if ($request_method !~ ^(GET|HEAD|POST|OPTIONS)$ ) &#123; return 444; &#125; location ~ ^/(scripts.*js|styles|images) &#123; expires 4h; add_header Cache-Control public; add_header ETag ""; break; &#125; location / &#123; proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-NginX-Proxy true; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection "upgrade"; proxy_cache_bypass $http_upgrade; add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"; add_header X-Frame-Options deny; add_header X-Content-Type-Options nosniff; proxy_hide_header Vary; proxy_hide_header X-Powered-By; proxy_redirect off; proxy_pass http://node_server; try_files $uri $uri/ /index.html; &#125;&#125; 其中，对 SSL 证书的配置文件内容稍作修改： 1234567ssl_session_cache shared:le_nginx_SSL:50m;ssl_session_timeout 1d;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_prefer_server_ciphers on;ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE$ 配置完成后，运行 nginx -t 确认配置文件无误，运行 systemctl restart nginx 就可以加载新的配置。此时，我的 Web App 就完全支持 HTTPS 和 HTTP/2 了。需要注意的是，上述部分配置与 Nginx 性能和安全优化有关，应根据自己的情况进行修改，具体含义可以访问 Nginx Doc ，如果遇到问题也可以给我留言。 一切配置妥当，最终我在 Qualys SSL Labs SSL Server Test 的测试结果达到 A+，测试结果如下图： 使用 Nginx 直接走 HTTP 代理部署 Angular 5 App 很简单，而使用其进行反向代理在配置的时候遇到了很多问题，最终查阅了不少资料才找到解决方法。希望我的这篇文章对大家有所帮助，那么下次见，Peace！]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>网站开发</tag>
        <tag>HTTPS</tag>
        <tag>HTTP/2</tag>
        <tag>Nginx</tag>
        <tag>SSL</tag>
        <tag>GitHub Pages</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[没有胶卷的随拍 - 2018 悉尼中国新年灯会展]]></title>
    <url>%2Fposts%2Fa999230%2F</url>
    <content type="text"><![CDATA[在中国农历春节期间，悉尼市政府为庆祝狗年春节，举办了不少活动，其中一项就是从悉尼歌剧院（Opera House）到达维斯角（Dawes Point）的悉尼港沿岸挂出的象征 12 生肖的大型彩灯。代表着狗的生肖灯取名为“瑞狗迎春”，作者是澳籍华裔艺术家宋陵，他说自己的创作源于中国传统花灯形象。我自然也不会错过这次展览，选了个周末，下午在市区闲逛，晚饭后就向着悉尼港出发，在悉尼感受下春节的氛围。沿着海港走一圈，就能找到造型各异的十二生肖，而特意前来观赏的人也很多，热闹无比。 十二生肖 这组十二生肖的彩灯，我最喜欢的是龙和鸡，小猪也是超有创意。你的偏爱又是哪个呢？ 在黑暗中拍出的照片加上滤镜可以看到明显的噪点…唉，我的 iPhone 6s 已经老了，今年一定要换部新手机！那么，下次再分享我的其它随拍，Peace！]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>悉尼</tag>
        <tag>随拍</tag>
        <tag>春节</tag>
        <tag>农历</tag>
        <tag>新年</tag>
        <tag>十二生肖</tag>
        <tag>灯会</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 下 FFmpeg 视频转码入门及进阶使用教程]]></title>
    <url>%2Fposts%2Fa7465832%2F</url>
    <content type="text"><![CDATA[如今较为常见的视频封装格式有 mp4 和 mkv 等， 内部的视频编码格式从前几年盛行的 H.264/x264 逐渐开始向新一代的 HEVC/x265（High Efficiency Video Coding 高效视频编码）过渡，而常见的音频编码格式无非 AC3、DTS 或者 AAC 等。无论是借助带有 GUI 的编码软件，还是使用命令行，FFmpeg 是最为广泛使用的工具，理论上 FFmpeg 支持各个平台，包括 Windows、macOS、iOS 以及 Android 等，这里只介绍在 macOS 下的使用。通过简单的命令，你可以大致了解 FFmpeg 在视频转换上的强大之处，视频编码部分也集中在 x264、x265，以及如何压制 macOS High Sierra 和 iOS 11 可以正确识别并生成缩略图的 HEVC 10bit 视频。文章最后，也会用一个较为复杂的例子，应用 -filter_complex 进行视频帧率的插值运算、嵌入 pgs 图形字幕，以及最后输出 HEVC 编码进行说明。 安装如果有看过我以前文章的朋友，可能会注意到使用 Homebrew 编译 mpv 的一个重要依赖就是 FFmpeg。不过，如果将其用作视频转码，默认编译的 FFmpeg 会缺少一部分组件，因此这里可能需要重新安装 FFmpeg。以我个人编译版本为例，使用 --HEAD 来配合最新的 mpv，在 Terminal 中输入如下命令： 1brew install ffmpeg --HEAD --with-fdk-aac --with-sdl2 --with-freetype --with-libass --with-libbluray --with-libvorbis --with-libvpx --with-opus --with-webp --with-x265 等待安装结束即可。 基础篇压制 x264 编码视频文件1ffmpeg -i input.mp4 -c:a libfdk_aac -c:v libx264 -crf 20 -preset slow output.mp4 使用 FFmpeg 编码的基本规则， -i 之后的文件为输入的视频文件，即 input.mp4，支持的格式众多，例如 mkv、flv、vob 等等，文件可以包含目录，使用 macOS 的文件拖拽功能很方便。output.mp4 即为输出文件，文件名可自定义，视频封装格式建议对应编码格式，不应将 mpeg-2 或者 vp8 编码的视频也封装为 mp4。-c:a 之后表示输出文件的音频编码器，一般 mp4 常用的音频编码为 AAC-LC，按照官方 Wiki 指南，建议使用编码器 libfdk_aac 而不是 aac，libfdk_aac 音质更好，这也是为什么在前文中编译 FFmpeg 增加 --with-fdk-aac 的原因。-c:v 之后代表输出文件的视频编码器，使用 libx264 即可压制 x264 编码的视频流。-crf 20 代表视频编码的码率系数，数字越大，压制的效果越差，建议选择范围在 16 - 28，压制高质量的视频建议取值 20 以下。-preset slow 代表一组控制压缩时间和文件大小的参数选择，一般常选 fast、medium 和 slow。 以上都是基于 one-pass 压制，如果需要严格控制码率则需要使用 two-pass，更详细的介绍，可以参考 Encode / H.264。 压制 HEVC 10bit 编码视频文件其实 FFmpeg 很早就开始支持 HEVC (x265) 的视频转码，只是一直改动较大，而最近的版本也终于支持编码 macOS High Sierra 下 Quicktime 可以播放，并且在系统中能够正确预览并生成缩略图的视频文件。编码命令的改动很小，添加一个 format tag 参数即可，如下： 12345ffmpeg -i input.mp4 \ -c:v libx265 -preset medium -crf 18 -pix_fmt yuv420p10le \ -c:a libfdk_aac -b:a 256k \ -tag:v hvc1 \ output_10bit.mp4 和压制 x264 视频非常类似，主要的不同点在于 -c:v 视频编码器需换为 libx265，并且压制 10bit 需要指定色彩空间，添加 -pix_fmt yuv420p10le。在音频编码参数中，如果增加 -b:a，可以控制音频文件的码率，按需使用。最后，非常重要的一点，必须添加参数 tag:v hvc1，这样输出的 Video Stream 会被标记为 hvc1，可以被 macOS 以及 iOS 11 原生支持播放，否则默认会被标记为 hev1，不被原生支持，第三方播放器播放倒没什么问题。 进阶篇修改视频分辨率假如原视频的分辨率为 1920x1080，为了降低文件大小，最简单的办法是将其转压成一个分辨率较低的版本，例如 720p，即 1280x720，那么我们可以使用 scale 视频滤镜来缩放视频： 1ffmpeg -i input.mp4 -vf scale=-2:720 -c:v libx264 -crf 20 -preset slow -c:a copy output.mp4 -vf scale=-2:720 会自动计算对应的横向分辨率（需为 2 的倍数，因此为 -2），源文件音频编码保持不变，因此设为 copy 即可。特殊情况下，遇到源文件视频比例错误，除了修改分辨率数值，还需要设置 dar 参数，例如： 1ffmpeg -i input.avi -vf scale=722x406,setdar=16/9 -c:v libx264 -c:a libfdk_aac -preset slow -crf 20 output.mp4 另外，绝对不建议增大分辨率，因为毫无意义，受限于原视频的视频质量，增大分辨率除了体积增大，画质只会更差。 反交错（Deinterlace）偶尔我会遇到一些早期使用 VCD/DVD 时代编码的视频，其中一个重要的特点就是隔行扫描，而直接转码的结果就是视频中快速运动的物体都能看到非常明显的扫描线。解决办法同样需要应用 vf 视频滤镜中的 yadif 来进行反交错，如下： 1ffmpeg -i input.vob -vf yadif -c:v libx264 -preset slow -crf 20 -c:a libfdk_aac -b:a 256k output.mp4 如果压制出来的效果不佳（还是有扫描线），可以尝试将 vf 的部分改为 -vf yadif=1:-1:0,mcdeint=2:1:10。 旋转视频需要将原视频进行旋转，同样可以应用视频滤镜来达到目的，如下： 1ffmpeg -i input.mov -vf "transpose=1" -c:a copy output.mov 其中， 12340 = 90 Counter Clockwise and Vertical Flip (default) 1 = 90 Clockwise 2 = 90 Counter Clockwise 3 = 90 Clockwise and Vertical Flip 如果想要 180 度翻转视频，则需要改为 -vf &quot;transpose=2,transpose=2&quot;。值得注意的是，旋转视频意味着对视频进行重编码，输出质量会稍微受到影响，可以添加 crf 参数控制视频输出质量，音频部分可以使用 copy。 一个复杂的“栗子”最后的这个例子，是我最近遇到的一个视频，简要的编码信息如下： 1234567Input #0, matroska,webm, from &apos;Input.mkv&apos;: Duration: 00:23:55.97, start: 0.000000, bitrate: 16372 kb/s Stream #0:0: Video: hevc (Main 10), yuv420p10le(tv, bt709), 1920x1080, SAR 1:1 DAR 16:9, 59.94 fps, 59.94 tbr, 1k tbn, 59.94 tbc (default) Stream #0:1(jpn): Audio: flac, 48000 Hz, stereo, s32 (24 bit) (default) Stream #0:2(jpn): Audio: flac, 48000 Hz, stereo, s32 (24 bit) Stream #0:3(chi): Subtitle: hdmv_pgs_subtitle (default) Stream #0:4(chi): Subtitle: hdmv_pgs_subtitle 可以看到，这是一个 HEVC 10bit 编码，分辨率 1080p，帧率 59.94 fps 的视频文件，带有两条 flac 编码的音轨，另有两条是 pgs 格式的图形字幕。我自己的 Macbook Pro 已经无法完全流畅地播放这个视频了，除了 HEVC 带来的巨大计算量，高帧率也是一个麻烦，可惜网上没有其它好的片源，因此，我只有自己尝试压缩。目标：维持分辨率但帧率减半，即降为 29. 97 fps，音轨只需要第一条，并且重编码为 AAC-LC，原片为日语，因此必须带有字幕，图形字幕直接嵌入视频，最后以 HEVC 10bit 重编码，少许降低码率。 改变帧率普遍会使用 -vf fps=fps=29.97 这类的参数，但自己尝试后发现一个问题，视频观看的感觉有跳跃性，不流畅，很像是丢帧的感觉。因为将帧率减半，意味着有一半的信息都丢弃了，而普通降低帧率的算法只有简单的插值运算甚至完全没有，造成了视频不连贯的效果。因此，改变帧率正确的做法是进行运动插值运算（Motion Interpolation），此法既可用在提高帧率上，也可以用于降低帧率，最终的结果都是提高视频播放的流畅度。这里会使用 -filter_complex 代替 vf，联合应用 minterpolate、overlay 以及 map 来解决帧率、嵌入视频，和保留一条音轨的问题。压制命令如下： 123456ffmpeg -i input.mkv \-filter_complex "[0:v]minterpolate='fps=29.97:mi_mode=mci:me_mode=bidir:mc_mode=aobmc:vsbmc=1'[bg],[bg][0:s:0]overlay[v]" -map "[v]" -map 0:a:0 \-c:v libx265 -preset medium -crf 18 -pix_fmt yuv420p10le \-c:a libfdk_aac -b:a 256k \-tag:v hvc1 \output_10bit.mp4 这里看起来会很复杂，实际上 -filter_complex 的工作模式就像是 pipe，[0:v] 表示输入文件的视频流，对应 Stream #0:0。从 minterpolate 到 vsbmc=1 都是插补滤镜的设置参数，具体的作用可以查看官方文档。[bg]代表该滤镜输出后的视频流，并传递给下一个滤镜 overlay。[0:s:0]表示输入文件的第一个字幕通道，对应 Stream #0:3，所以如果是 [0:s:1] 则对应 Stream #0:4。 overlay 就会将该图形字幕嵌入到视频中，然后输出为 [v]，进行 mapping。视频取处理后的 [v]，音频取原输入文件的第一个音频通道，[0:a:0] 即代表 Stream #0:1。最后和此前压制视频的参数就一模一样了，压制为 HEVC 10bit 编码的视频文件。 需要注意的是，运动插值运算非常耗时，CPU 占用确不高，应该是 minterpolate 滤镜只能调用单核的缘故。在我的电脑上， 此 23 分钟左右的视频压制一次耗时约 20 小时，请谨慎使用。 好了，关于 FFmpeg 视频转码和压缩的话题就聊到这里，下次见。Peace！]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>HEVC</tag>
        <tag>FFmpeg</tag>
        <tag>Homebrew</tag>
        <tag>视频转码</tag>
        <tag>x264</tag>
        <tag>x265</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 Angular 5 开发的加密数字货币实时行情 Web App]]></title>
    <url>%2Fposts%2Fc4863de1%2F</url>
    <content type="text"><![CDATA[Angular 是基于 TypeScript 的 Javascript 框架，由 Google 进行开发和维护，并且需要说明的是，它与 AngularJS（旧版本）不兼容，而这次开发的碰到的许多问题，搜索 Angular 相关的内容，绝大多数都是基于 AngularJS 这一旧版本的，可见当时受欢迎的程度。随着这几年前端框架的流行和发展，逐渐形成了目前的三分天下之势，Angular、Vue 和 React，后两者分别由 Facebook 和 Google 前员工 Evan You 开发和维护。我自己出于学习一种前端框架的目的，选择 Angular 这一成熟的框架，开发了一个展示数字加密货币（Cryptocurrency）的 Web App，欢迎浏览 https://crypto.kris2d.info 进行查看。 简单介绍Cryptocurrency Market 是基于 Angular 5 框架开发的 Progressive Web App，用于显示热门加密数字货币的实时行情和历史价格走势。目前支持 60 种货币，可以获取并更新实时价格信息，数据来源 CryptoCompare。点击每一种货币可以进一步浏览最近 24h、7 天、1 个月以及 1 年的价格走势，后续会增加更多的币种和排序功能。 平台环境 Angular 5.2.9 Angular-Cli 1.7.4 NG-ZORRO 0.6.15 Chart.js 2.7.2 Nginx 1.12.2 特性 纯前端开发，无后端代码； 服务器采用 Nginx 作 Reverse Proxy，http-server 和 PM2 用于设置不间断运行的静态服务器； 应用了 Ant Design 简化了部分视觉代码，视觉风格上保持统一； 每 15 秒获取最新的价格数据，如果价格产生变化，根据涨跌情况渲染不同颜色的背景色作为提示（具体的效果个人感觉没有很流畅，后续进行完善）； 价格走势图使用 Chart.js 绘制，根据需求进行了许多自定义修改，例如增加了伴随鼠标移动的纵向线，增加了图标数据的可读性，手机端纵向线也会随着手指的触摸左右移动，美观上还有待改善； 针对移动端做了显示优化，包括最新的 iPhone X; 支持 Google 的 Progressive Web Apps 特性，可以添加到 iOS 和 Andorid 手机桌面或者 Chrome 浏览器的 Apps 页面中。 使用打开你的浏览器，访问 https://crypto.kris2d.info To-do 增加更多数字货币，可能的话，按照最新的市值动态获取数据； 增加首页表格的排序功能； 获取行情相关新闻并增加到首页内容中； favicon 在上线后没有正常显示，本地测试没有问题，之后需要解决； 服务器 nginx 配置和性能优化（原打算将 nginx 配合另一个 http server 作为 reverse proxy 来使用，无奈总是遇到 403 forbidden error，后续再调整）； 其它样式和功能完善，之后尝试制作一个微信小程序版本。 24/02/2018 小更新 显示 Top 20 数字货币，之后如果再增加考虑对表格分页； 增加了按货币名称排序的功能，为此重新调整了部分数据结构，以适应排序事件触发的算法； 07/03/2018 再次更新 全站启用 HTTPS（支持 HTTP/2），使用 Let’s Encrypt 的免费证书； 增加数字货币总量到 60，以后有需要再增加，常用的基本都有了； 增加了查找和排序功能，可以切换每页显示的货币数量，默认 20/page； 为了偷懒，集成了 Travis CI 进行自动化 build 和 deployment。 05/04/2018 再次更新 增加 Progressive Web Apps 特性，可以将 App 添加至 Android 手机桌面直接运行（需配合使用 Chrome，浏览页面时会有提示信息）； 完善多平台多系统的图标及配置信息，例如支持 iPhone、Android 及 Windows 等操作系统，也支持 TouchBar 和 Windows Tile 图标显示。 后话这次开发前前后后还是遇到了不少坑，有关技术填坑的内容，以后找机会聊，Peace！]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>Cryptocurrency</tag>
        <tag>Bitcoin</tag>
        <tag>数字货币</tag>
        <tag>加密货币</tag>
        <tag>网站开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Homebrew 编译 mpv --HEAD 报错的解决方法（macOS）]]></title>
    <url>%2Fposts%2F2912b351%2F</url>
    <content type="text"><![CDATA[对于 macOS High Sierra 的用户，在 mpv 正式发布下一个正式版本之前，为了解决播放视频文件的一个致命 bug（即在播放视频时，如果尝试双击播放另一个视频文件，mpv 无法正常切换，而是启动一个新的实例，但该实例图标无响应也无法强制关闭），我之前一直建议用户在编译 mpv 时加入 --HEAD 来使用 bug 修复后的版本。不过，在近一段时间，使用 Homebrew 编译 --HEAD 版本必然出错。原因是 mpv 的开发者对最近一次 FFmpeg API 的修改导致程序功能不可用的情况感到忍无可忍，因此开发者决定使用自己 fork 并有针对性打补丁的版本 ffmpeg-mpv，并且编译 git master 版本的 mpv 会强制要求使用这一特殊版本 FFmpeg 的支持，也造成了现有的 brew formula 失效。 怎么办关于 mpv 和 FFmpeg 之间的矛盾如何解决目前仍然没有定论，存在着不少争议。为了能够使用 Homebrew 正确编译最新版本的 mpv，我对比并且试验了一些方法，最后使用的是来自网友 dreness 提供的办法（见 issue#5108），通过打补丁的方式修改 FFmpeg 和 mpv 的编译代码： 将 FFmpeg HEAD Git Repo Url 替换为 ffmpeg-mpv 所在地址； macOS 下编译 mpv 需对 stream/stream_libarchive.h 打补丁。 代码变更内容具体到代码，需要修改的文件包括 Homebrew 下的 /Formula/ffmpeg.rb、/Formula/mpv.rb 以及 mpv 下的 /stream/stream_libarchive.h，变动如下： 1234567891011121314151617181920212223242526272829303132diff --git a/Formula/ffmpeg.rb b/Formula/ffmpeg.rbindex 5ee917f0..13fad092 100644--- a/Formula/ffmpeg.rb+++ b/Formula/ffmpeg.rb@@ -3,7 +3,7 @@ class Ffmpeg &lt; Formula homepage "https://ffmpeg.org/" url "https://ffmpeg.org/releases/ffmpeg-3.4.tar.bz2" sha256 "5d8911fe6017d00c98a359d7c8e7818e48f2c0cc2c9086a986ea8cb4d478c85e"- head "https://github.com/FFmpeg/FFmpeg.git"+ head "https://github.com/mpv-player/ffmpeg-mpv.git" bottle do sha256 "1807e00fdfc308feaa78924e0b6991b26e6f37ea379ac82b78dca038a0f67a7b" =&gt; :high_sierradiff --git a/Formula/mpv.rb b/Formula/mpv.rbindex c557288a..af34525b 100644--- a/Formula/mpv.rb+++ b/Formula/mpv.rb@@ -12,6 +12,14 @@ class Mpv &lt; Formula sha256 "ffbd72e37a328a5c6d5779746c9e6462b3f6d260f365bd922716a16ad3f3cd8a" =&gt; :el_capitan end+ head do+ patch do+ # patch for https://github.com/mpv-player/mpv/issues/5108+ url "https://youbeill.in/scrap/note-VSiLBZQxn2.txt"+ sha256 "972cd7301eb7783abb632a904168af5cf891dca5b42016cf96241b86a5231d92"+ end+ end+ option "with-bundle", "Enable compilation of the .app bundle." depends_on "pkg-config" =&gt; :build 12345678910111213141516diff --git a/stream/stream_libarchive.h b/stream/stream_libarchive.hindex 56e86a6..8884834 100644--- a/stream/stream_libarchive.h+++ b/stream/stream_libarchive.h@@ -1,6 +1,11 @@ #include &lt;locale.h&gt; #include "osdep/io.h"+#ifdef __APPLE__+# include &lt;string.h&gt;+# include &lt;xlocale.h&gt;+#endif+ struct mp_log; struct mp_archive &#123; 解决方法现在，我们可以通过简单的命令来对 Homebrew Formula 进行修改。 123cd $(brew --prefix)/Homebrew/Library/taps/homebrew/homebrew-corecurl -o mpv-ffmpeg.patch https://youbeill.in/scrap/note-PnAcVrJqbc.txtpatch -p1 &lt; mpv-ffmpeg.patch 之后就可以正常编译 ffmpeg --HEAD 和 mpv --HEAD，例如： 12brew install ffmpeg --HEAD --with-fdk-aac --with-sdl2 --with-freetype --with-libass --with-libbluray --with-libvorbis --with-libvpx --with-opus --with-webp --with-x265brew install mpv --HEAD --with-bundle --with-libbluray --with-libdvdnav --with-libdvdread --with-uchardet --with-libaacs --with-libcaca --with-rubberband --with-libarchive --with-vapoursynth 声明：以上只是一个暂时的解决方案，直到开发者最终决定如何解决 ffmpeg-mpv 这一 fork 的问题。后续如果有其它变化，我会及时更新补充。补丁是基于现有 FFmpeg 发行版本 3.4 进行修改的，如果后续有版本更新，该补丁会失效，需要做相应的修改。另外，补丁文件是以在线文件的形式提供，需要联网。 如果有其它问题，欢迎在评论区给我留言。Peace！]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>mpv</tag>
        <tag>macOS</tag>
        <tag>FFmpeg</tag>
        <tag>Homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[6个前端动效实例分享（11/2017）]]></title>
    <url>%2Fposts%2Fca919bb9%2F</url>
    <content type="text"><![CDATA[CodePen 一直是优秀前端动效设计作品的集中地，简直可以说是全球 Web 前端开发人员的圣地。这里就如同程序猿版本的 Dribbble，你可以自由地学习和借鉴优秀的作品，发掘优秀的代码甚至设计的前沿。今天，和上一期一样，我精选了 6 个非常受欢迎的作品，供大家欣赏。 SA 15 Whirl 2 Galaxy Morpher - Codevember 1 / 30 Sapphire morph - Codevember #4 Codevember #4 Codevember 7 - Pillow 下期见，Peace！]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>JavaScript</tag>
        <tag>前端开发</tag>
        <tag>动效设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[没有胶卷的随拍 - 黄昏和夜幕]]></title>
    <url>%2Fposts%2F9ea4819%2F</url>
    <content type="text"><![CDATA[现在住的地方叫做 Rhodes，整个区域是一个水边半岛，而因为住家靠近河边，闲暇的时候可以沿着河边小路溜达散步。沿途的风景很好，中间还能看到一座桥梁连接着对岸，遥望过去也是高高低低的建筑和公寓楼。如果天气不错，近黄昏的时候，日落的余晖洒落在水面上，波光粼粼，而光也印在来来去去的人身上，有一种暖暖的感觉。当夜幕降临，也能看到形形色色的人或是结伴走着，或是坐在路边的座椅和朋友们聊着天，加上在黑暗中格外醒目的光影，会有一丝惬意的感觉，而我也想尝试用自己的手机捕捉那种感觉。 黄昏 夜幕 下次见罗，Peace！]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>悉尼</tag>
        <tag>随拍</tag>
        <tag>风景</tag>
        <tag>摄影</tag>
        <tag>河边</tag>
        <tag>黄昏</tag>
        <tag>夜幕</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017 我推荐的 8 款实用 Chrome 扩展插件]]></title>
    <url>%2Fposts%2F465b6e07%2F</url>
    <content type="text"><![CDATA[浏览器在如今移动端设备上的使用率已经在很大程度上被 App 所替代，但在桌面端仍然是日常必备的选择。Google 出品的 Chrome 更是如此，在全球浏览器市场份额上占据霸主地位，其受欢迎的程度可见一斑。有人说 Chrome 是世界上最好的浏览器，个人觉得 Chrome 虽然有缺点（比如最常被吐槽的是内存占用高），但凭借其稳定和安全，以及众多的扩展插件的支持，我几乎没有理由去使用别的浏览器。而提到让 Chrome 爱好者们爱不释手的各类插件，有一些甚至可以被称为“神器”，能够赋予新的功能并且极大地提高我们的使用效率。下面我整理了一些自己常用的优秀插件，推荐给大家。 uBlock Origin对于任何浏览器来说，首先应该安装的是广告过滤插件，这可以帮助我们在浏览网页时不被各种广告或者弹出窗口干扰。最早我接触并且使用了很多年的去广告插件是 AdBlock 和 ABP（AdBlock Plus），两者大同小异，其中 AdBlock Plus 应该是过去 Firefox 的推荐插件，之后移植到了 Chrome 上。但现在值得强烈推荐的广告过滤插件是这款 uBlock Origin，其最大的特点是相对于 ABP 在性能上有较大的优势，内存和 CPU 占用极低。并且和 ABP 类似，配合添加第三方的过滤列表，可以实现屏蔽信息跟踪和恶意软件网站等。 uBlock Origin 插件 Github 地址； 在默认过滤规则基础上，推荐增加 CHN: EasyList China (中文) 用于过滤中文网站的广告； Safari 浏览器需要手动下载安装 uBlock-Safari，目前最新版本为 1.14.14； 推荐安装 uBlock Origin Extra 和 uBlock Protector Extension 来启用额外的保护，后者请根据插件页面提示设置并安装自定义规则。 Inbox by Gmail使用这款插件，首先你需要启用 Inbox by Gmail 这一 Google 服务。它是将邮件服务和 GTD 相结合的一个应用，从功能上，Inbox 将一封邮件视为一个 ToDoList 里的任务并且具备了比 Gmail 更智能的自动标签和分类功能，其采用了 Material Design 风格的设计，处理完成的邮件只需打勾即会归档到 Done 分类目录，保证了收件箱的清爽，推荐各位使用。而对应的这款同名插件，只有一个简单的功能，点击一下鼠标，即可保存网页链接到你的 Inbox 邮箱供日后查看或通过电子邮件分享，类似于在邮箱里建立一个 Reading List，对于每天查看邮箱的人来说，很方便。 首次开启 Inbox by Gmail 邮箱服务可能需要等待 24 小时； 插件同样支持多邮箱账户。 Unblock Youku身处海外，有的时候我也会去优酷或者哔哩哔哩上看一些在线视频，然而点开不少剧集或者番剧都会遇到“抱歉，此视频只限于中国内地播放”或者“由于版权受限，您访问的视频只能在中国大陆范围内观看”等提示信息，无法观看。安装 Unblock Youku 这款插件即可解锁，让我们方便地从海外访问这些内容受限的视频。不要被名字误导，它不仅能解锁优酷、土豆，还支持哔哩哔哩、爱奇艺、搜狐等国内主流的在线视频网站。 官方论坛 iOS、Android 在 Wi-Fi 连接下使用 Unblock Youku 的方法 眼不见心不烦（新浪微博）相信不少人都对渣浪的微博是又爱又恨，每天都要刷微博，看看有趣的人和事，但是官方强行推送的广告、各种推荐的热门话题、明星、推广信息、淘宝天猫链接都着实让我火大。直到我发现了这款插件，眼不见心不烦，才终于让我在桌面端也能享受清爽干净的微博，心情真的愉快了不少。插件除了提供内容过滤功能，同时可以对页面进行改造，具体的设置可以根据自己的喜好来决定。 插件的设置集成在你的微博页面右上角的设置中； iOS 上推荐的第三方微博客户端是 Cosmos，作者几次的更新都很给力。官方微博 App 我仍然保留，有的时候桌面端登录需要用来扫一扫，没辙。 baidudl接下来的两个插件和百度网盘有关，介于国内网盘市场差不多是百度一家独大了，除了非会员的速度限制外，超过 1GB 的大文件不能直接下载而强推百度云管家，体验非常糟糕。而网络上用于突破百度网盘下载限制的插件或者脚本已经很多了，这里推荐2个，原因后面会说明。在百度网盘页面使用 baidudl 插件可以生成直接下载的链接，Glink 是稳定但是速度一般的链接，Hlink 是插件深度挖掘到的链接，速度更快。配合 Aria2 可以实现超高速下载。 RPC Download 功能需要 Aria2 RPC 的支持，macOS 下推荐使用 Aria2GUI 这款开源软件配合使用； 这里提一个遇到的问题，使用 Hlink 或者 RPC Download 高速下载大容量的压缩文件，解压时有很大几率会遇到压缩文件会损坏。怀疑其它大容量文件也会有损坏的情况发生，因此，需要借助其它插件来下载。 Baidu Exporter同上，在接触 baidudl 前一直使用的插件，因为普及度很高所以被官方和谐了，目前无法从 Chrome 的扩展商店中安装，需要访问该项目的 GitHub 页面下载安装。安装 Baidu Exporter 前，请在 Chrome 的扩展设置页面打开 “Developer mode” 才能加载外部插件。在网盘页面，勾选想要下载的文件后，会在原“分享”按钮旁显示一个新的“导出下载”按钮，配合 Aria2 RPC 可以实现高速下载，也可以导出下载链接到其它支持的软件中。 访问 GitHub 地址，查看必要的安装和设置步骤； macOS 下推荐使用 Aria2GUI 配合使用； 没有遇到过文件损坏的情况，但速度有时候不会很快； Chrome 每次启动都会提示禁用该插件，macOS 下需作特殊处理： 首先，在扩展页面，记录下 Baidu Exporter 插件的 ID； 保存下列代码并命名为 com.google.Chrome.mobileconfig； 替换代码中第 19 行的 value01 为插件的 ID； 双击并导入该 policy 文件。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;&lt;plist version="1.0"&gt;&lt;dict&gt; &lt;key&gt;PayloadContent&lt;/key&gt; &lt;array&gt; &lt;dict&gt; &lt;key&gt;PayloadContent&lt;/key&gt; &lt;dict&gt; &lt;key&gt;com.google.Chrome&lt;/key&gt; &lt;dict&gt; &lt;key&gt;Forced&lt;/key&gt; &lt;array&gt; &lt;dict&gt; &lt;key&gt;mcx_preference_settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;ExtensionInstallWhitelist&lt;/key&gt; &lt;array&gt; &lt;string&gt;value01&lt;/string&gt; &lt;/array&gt; &lt;/dict&gt; &lt;/dict&gt; &lt;/array&gt; &lt;/dict&gt; &lt;/dict&gt; &lt;key&gt;PayloadEnabled&lt;/key&gt; &lt;true/&gt; &lt;key&gt;PayloadIdentifier&lt;/key&gt; &lt;string&gt;MCXToProfile.7e2bec75-299e-44ff-b405-628007abffff.alacarte.customsettings.bdac4880-d25f-4cdd-8472-05473f005e7e&lt;/string&gt; &lt;key&gt;PayloadType&lt;/key&gt; &lt;string&gt;com.apple.ManagedClient.preferences&lt;/string&gt; &lt;key&gt;PayloadUUID&lt;/key&gt; &lt;string&gt;bdac4880-d25f-4cdd-8472-05473f005e7e&lt;/string&gt; &lt;key&gt;PayloadVersion&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;/dict&gt; &lt;/array&gt; &lt;key&gt;PayloadDescription&lt;/key&gt; &lt;string&gt;Included custom settings:com.google.Chrome&lt;/string&gt; &lt;key&gt;PayloadDisplayName&lt;/key&gt; &lt;string&gt;MCXToProfile: com.google.Chrome&lt;/string&gt; &lt;key&gt;PayloadIdentifier&lt;/key&gt; &lt;string&gt;com.google.Chrome&lt;/string&gt; &lt;key&gt;PayloadOrganization&lt;/key&gt; &lt;string&gt;&lt;/string&gt; &lt;key&gt;PayloadRemovalDisallowed&lt;/key&gt; &lt;true/&gt; &lt;key&gt;PayloadScope&lt;/key&gt; &lt;string&gt;System&lt;/string&gt; &lt;key&gt;PayloadType&lt;/key&gt; &lt;string&gt;Configuration&lt;/string&gt; &lt;key&gt;PayloadUUID&lt;/key&gt; &lt;string&gt;7e2bec75-299e-44ff-b405-628007abffff&lt;/string&gt; &lt;key&gt;PayloadVersion&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt;&lt;/dict&gt;&lt;/plist&gt; Local CDNLocal CDN 源于 Decentraleyes 这一项目，我们知道，现在的大多数网站都会加载各种 JavaScript 库文件，例如常见的 JQuery、modernizr、angular 等等，而且很多网站使用的这些 js 文件都是以 CDN 形式加载的，用于提高不同地区用户的网页加载速度。Local CDN 这款插件将网页中的第三方 js 文件劫持到本地，免去了访问 CDN 网络的时间，进一步提高网页的访问速度，这算是相当另类的方法吧。当然，由于仅仅是支持基于 CDN 的 JavaScript 库文件，能够加速的网站还是很有限的。 访问官方页面查看支持的 CDN 网络和 js 库文件； 相对于 Decentraleyes，Local CDN 提供了更多的支持，对 HTTPS 的兼容性也更好，来自原作者的话。 Isometric ContributionsGitHub 的个人页面可以看到该用户一段时期内的活跃情况，每一次 commit 即会标记一次活跃次数，颜色从浅到深，代表活跃次数越高。Isometric Contributions 这款插件的作用仅仅是将上述平面视图改变为立体视图，并且提供了一些更加直观的统计信息。简单而有趣的插件，GitHub 用户推荐使用。 GitHub 地址 视图可以切换，也可以同时展示 3D 和 2D 视图。 那么，今天就到这儿了，如果你有想要推荐的 Chrome 插件，欢迎在下面留言。Peace！]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>浏览器</tag>
        <tag>插件</tag>
        <tag>扩展</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[近期迅雷无法下载的问题和解决方法]]></title>
    <url>%2Fposts%2F57760d8%2F</url>
    <content type="text"><![CDATA[紧急更新一篇。对于大多数华人来说，特别是国内的网友，迅雷可以说是首选的下载软件。功能上自然不用说，很强大，尤其是加入会员之后的离线下载和高速通道。当然，最近几年也因一些版权原因，部分资源会被屏蔽而无法下载。但是最近几日开始的，很多国内和海外的网友都接连出现迅雷无法下载任何资源的情况，软件提示“包含违规内容，文件无法下载”，或者使用迅雷极速版提示“任务出错”等等，即便是迅雷会员也是同样的问题。对此迅雷官方微博给出了回应，指出“由于众所周知的原因，部分资源下载报错的几率增加”。这个众所周知的原因，不用解释（可恶的 18 + 1）。 事态进展（由网友整理）10月16号，迅雷官方微博回应称：“由于众所周知的原因，部分资源在下载时报错的机率增加，我们的攻城狮正竭力工作，确保广大用户的正常使用，给您带来的不便敬请……原谅我，爸爸们”。 10月14号，迅雷官方论坛炸开锅，管理人员给出回应，称因系统优化中预计要11月1号才会修复好。 10月13号开始，国内用户也遇到这个问题，具体表现为（使用迅雷9、迅雷极速版等）：1、下载任何资源都提示任务出错；2、下载任务资源都提示“包含违规内容、据当地法律法规文件无法下载”。 10月10号开始，海外用户启动迅雷9、迅雷极速版等客户端，大量资源无法下载。 解决方法 Windows - 进入 C:\Windows\System32\drivers\etc\hosts，用记事本编辑，加入下列需要屏蔽的域名（使用 Win 10 的用户如果提示没有权限则把 hosts 文件复制到其它盘操作好以后再粘贴回来）； macOS - 在 Terminal 中输入 sudo nano /etc/hosts，根据提示输入账户密码后编辑并屏蔽下列域名，完成后 Ctrl + O 保存文件，Ctrl + X 退出 nano。 123127.0.0.1 hub5btmain.sandai.net127.0.0.1 hub5emu.sandai.net127.0.0.1 upgrade.xl9.xunlei.com 注：如果是迅雷会员，建议安装使用迅雷极速版而不是 9，然后使用 hosts 屏蔽，可解决下载报错的问题。该方法可以正常下载 http、https 资源，但如果使用了全局代理软件则可能会失效。磁力链接 magnet 暂时没有办法，因为是由迅雷解析，需要先得到种子文件再添加到迅雷中。 Peace！]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>迅雷</tag>
        <tag>Windows</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[广告有深度 - 宝矿力舞 CM]]></title>
    <url>%2Fposts%2F7aaf6a29%2F</url>
    <content type="text"><![CDATA[本期视频分享的是来自宝矿力水特 ポカリスエット 的 CM，分别是「去到巴黎跳宝矿力舞」、「去到古巴跳宝矿力舞」、「舞蹈修学之旅」篇、「热舞开学典礼」篇 4 段。今早刷微博的时候偶然看到后面两段 CM，发现其中的音乐很熟悉，原来有听过，才想起那是「宝矿力舞」，而且曾经非常的喜欢。歌曲本身似乎没有名字，暂且就叫它「宝矿力之歌」吧。歌曲似乎并没有单独发行，歌曲本身充满了动感和节奏，配合舞蹈，真的很适合用来表现青春和热血。如同 CM 中年轻人心中的呐喊「每个人总有一天会变成大人，但，那又怎么样？」，是哦，痛快的青春真好！ 去到巴黎跳宝矿力舞 大陆访客请点击访问 B 站视频 (￣３￣)a 去到古巴跳宝矿力舞 大陆访客请点击访问 B 站视频 ╮(￣▽￣)╭ 舞蹈修学之旅篇 大陆访客请点击访问 B 站视频 (￣.￣) 热舞开学典礼篇 大陆访客请点击访问 B 站视频 (￣⊥￣) 怎么样，有没有很想学这个「宝矿力舞」？下期再见，加油，Peace!]]></content>
      <categories>
        <category>好玩</category>
      </categories>
      <tags>
        <tag>广告</tag>
        <tag>日本</tag>
        <tag>CM</tag>
        <tag>宝矿力水特</tag>
        <tag>Pocari Sweat</tag>
        <tag>ポカリスエット</tag>
        <tag>校园</tag>
        <tag>青春</tag>
        <tag>舞蹈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mpv 在 macOS High Sierra 下硬解 H.265/HEVC]]></title>
    <url>%2Fposts%2F497173ab%2F</url>
    <content type="text"><![CDATA[macOS High Sierra 新增的一个特性，即支持新一代视频压缩技术 HEVC（High Efficiency Video Coding 高效视频编码，也称为 H.265），这项技术也內建在 iOS 11 中。对比现行常用的 H.264/x264 标准，HEVC 编码的视频能在保证相同画质的前提下，将文件的体积最少降低 40%，优势可以说相当明显。而想要播放 HEVC 视频，mac 上常见的播放器都可以做到，但要实现硬件加速却需要满足一些条件和设置。这篇文章会介绍使用 mpv 这一优秀的开源播放器在 macOS High Sierra 下实现硬解 H.265/HEVC，具体的操作会涉及到使用 Terminal 以及基于 Homebrew 来安装和管理部分程序。 支持硬解 HEVC 的 Mac 仅限于新机型 “We’re building in software encoder support into High Sierra for all Macs.” “Hardware acceleration of HEVC in the newest Macs.” 苹果在 macOS High Sierra 发布会上的表述，即所有的 Mac 都支持 HEVC 的软件编码，而硬件解码的支持仅限于最新的 Mac 几款机型。具体来说，需要 2016 或 2017 款 Mac。2016 款 Mac，CPU 型号为 Skylake，可以支持硬解 HEVC 8bit；2017 款，CPU 使用的是 Kaby Lake，可以硬解 8bit 和 10bit（即 HDR ）。2016 款 Mac 如果配有独显，虽然独显能硬解 10bit，但基于苹果系统不行，需要换用 Windows。 个人还在使用 2013 年末的 15寸 Macbook Pro Retina，当然不在支持之列，过段时间考虑换新。 编译 x265 和 FFmpeg默认使用 Homebrew 管理和安装 macOS 中的命令行程序，例如本篇的 FFmpeg 和 mpv 等，而安装 Homebrew 的前提是安装 Xcode 及其 Command Line Tools，这里就不详细说明了，请自行 Google。 最新版本的 x265 在默认安装时已提供对 16bit 的支持，无需添加 option --with-16-bit ，使用 install 或者 reinstall（如果你的系统已安装 x265）重新编译支持 16bit 的 x265，否则解码时会有类似 libx265 缺少 pix_fmt &#39;yuv420p10le&#39; 这样的错误提示： 1brew install x265 之后，你需要重新编译 FFmpeg。FFmpeg 于近期引入了一条针对 HEVC 的补丁，在编译时加入 --HEAD 即可使用该补丁版本。同上，使用 install 或者 reinstall（如果你的系统已安装 FFmpeg）重新进行编译，其它 option，除 x265 外可根据自己的需求增减： 1brew install ffmpeg --HEAD --with-fdk-aac --with-sdl2 --with-freetype --with-libass --with-libbluray --with-libvorbis --with-libvpx --with-opus --with-webp --with-x265 编译 mpvmpv 解码时依赖于 FFmpeg，而 macOS High Sierra 更新后由于应用打包机制的变化导致 mpv 在切换视频时产生了一个严重的 bug。在播放视频时，如果尝试双击播放另一个视频文件，mpv 无法正常切换，而是启动一个新的实例，但该实例图标无响应也无法强制关闭。该 bug 已经修复，暂时未发布到 release 通道，因此也需要在编译时加入 --HEAD 使用 bug 修复后的版本。关于 mpv 的设置，可以参考我的 config 配置文件，请访问 mrcotter_dotfiles。 12brew install mpv --HEAD --with-bundle --with-libbluray --with-libdvdnav --with-libdvdread --with-uchardet --with-libaacs --with-libcaca --with-rubberband --with-libarchive --with-vapoursynthbrew linkapps mpv 需要注意的是，该 master 版本的 mpv 改变了部分设置参数，需要对 ~/.config/mpv/mpv.conf 进行修改，如下： 1vo=opengl 修改为 1vo=gpu 如果原设置使用的是： 1profile=opengl-hq 需修改为 1profile=gpu-hq 另外，确保 hwdec 设置为 auto / auto-copy / videotoolbox / videotoolbox-copy 其中一项。至此，如果你正好拥有一台 2017 款的 Mac，那么你已经可以使用 mpv 硬解 H.265/HEVC 10bit 视频了，去看看 CPU 占用率吧。最后，附上一小段脚本，帮你快速绑定 mpv 作为系统默认的视频播放器（需要 Homebrew 的支持）。 123456789101112131415161718192021222324#!/usr/bin/env bash# Set default application using mpv for video playAPPFILE=/Applications/mpv.appif [ ! -e "$APPFILE" ]; then exitfiBUNDLEID=$(mdls -name kMDItemCFBundleIdentifier -r $APPFILE)EXTS=( 3GP ASF AVI FLV M4V MKV MOV MP4 MPEG MPG MPG2 MPG4 OGM RMVB WMV )if test ! $(which duti); then echo "Installing duti" brew install dutififor ext in $&#123;EXTS[@]&#125;do lower=$(echo $ext | awk '&#123;print tolower($0)&#125;') duti -s $BUNDLEID $ext all duti -s $BUNDLEID $lower alldone 保存为 .sh 文件后不要忘了使用 chmod 设置执行权限。Peace！]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>mpv</tag>
        <tag>macOS</tag>
        <tag>HEVC</tag>
        <tag>H.265</tag>
        <tag>Hardware Decoding</tag>
        <tag>硬解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一起看电影 - 「闪光少女」]]></title>
    <url>%2Fposts%2F151ddd4e%2F</url>
    <content type="text"><![CDATA[最近没怎么更新博客，一来是因为感情状况出了一些问题，需要时间调整一下心情；二来是上周末国内的表妹和她老公到悉尼，我和表弟就当上了地陪，带着她们小两口在悉尼到处晃。趁着这段时间也玩了几天，去了一些新的地方，拍了美景和美食，这样正好能凑成一份悉尼 5 日旅游攻略，过几天一并分享给大家。今天的碎碎念主题是电影，因为难得看了一部上佳的国产电影「闪光少女」，还是忍不住跟大家分享一下。 影片可以说是典型的校园青春电影，也可以说不是，因为爱情并不是主线。陈惊和她的男闺蜜“油渣”，以及联手“502 宿舍”组成 2.5 次元乐团是中国传统的民族乐器和二次元文化的代表，而陈惊喜欢的校草师哥，还有学校则是代表着强势和权威的西洋乐阵营。她们为了挑战权威，上演了一幕幕生猛搞笑的青春趣事。电影虽有槽点，不过总体上我是很喜欢的，很大一部分的原因是，这是青春片该有的样子。它让很多人看到了自己的影子，那些往往不被他人所理解的那份热爱、坚持和执着。除此之外，你还能看到男主“油渣”默默守护的那份爱恋，点滴的浪漫却能带给你感动。而反观另一类所谓的青春电影，以郭小四导演的「小时代」系列来说，这完全不是我脑中的青春时代和故事，仅仅是撕逼和纸醉金迷。 最早听说这部电影，大概是来自官方的一个宣传片段，一场民乐和西洋乐的斗琴。而我看的时候，真正让我印象深刻的，是漫展上表演的那首「权御天下」，据说是二次元神曲，加上最后的剧院演出，电影在音乐方面做得十分出色。如果你感兴趣，先看看这几首电影的原声和片段吧，最后还有来自杨宗纬献唱的插曲「生命被你照亮」，以及周笔畅演唱的片尾曲「用尽我的一切奔向你」， MV 似乎在讲述两人毕业后的故事。 电影片段 - 漫展上的表演《权御天下》 大陆访客请点击访问 B 站视频 (￣３￣)a 电影片段 - 民族乐器 vs 西洋乐器 大陆访客请点击访问 B 站视频 ╮(￣▽￣)╭ 电影插曲 - 生命被你照亮 by 杨宗纬 大陆访客请点击访问 B 站视频 (￣.￣) 电影插曲 - 用尽我的一切奔向你 by 周笔畅 大陆访客请点击访问 B 站视频 (￣⊥￣) 以后有好的电影也会跟大家分享，Peace!]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>电影</tag>
        <tag>二次元</tag>
        <tag>西洋乐</tag>
        <tag>民乐</tag>
        <tag>古风</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Deploy 问题及自建脚本解决方案]]></title>
    <url>%2Fposts%2Fe7815373%2F</url>
    <content type="text"><![CDATA[上周在更新 Blog 的时候遇到了奇怪的问题，Hexo 突然就不能正常 deploy 了。在 GitHub 上搜索到别人也有遇到同样的情况，但是解决方法各不相同。有删除 .deploy_git 再重新 deploy，有重新生成 ssh 密钥，也有备份后删除整个 hexo 重来的。这几个办法我都用了，结果还是不管用，执行 hexo d 命令后，就一直卡在某个位置，等待一段时间后如果按 ctrl + c 强行结束进程，会提示 Deploy done，但远程的 repository 并没有任何变化。 手动使用 git 命令进行同步一切正常，对于这个莫名其妙的bug，手动建一个脚本就能解决了。 Clone 博客所在的 repository在本地创建一个目录，将下列命令中的 yourname 替换为你的 Github ID，本地路径地址也请替换。 1git clone https://github.com/yourname/yourname.github.io.git /Path/to/Local/Git/yourname.github.io 创建 deploy.sh 脚本新建文档，输入： 12345678910111213#!/bin/bash# Generate bloghexo cleanhexo generate# Copy to repositorycp -R public/* /Path/to/Local/Git/yourname.github.iocd /Path/to/Local/Git/yourname.github.io# Deploygit add .current_date_time=`date "+%Y-%m-%d %H:%M:%S"`git commit -m "Site updated: $current_date_time"git push origin master 将文件另存为 .sh 格式至 Hexo 博客所在目录，启动 Terminal，跳转至该目录下，设置脚本的执行权限。 1chmod +x deploy.sh 之后，需要更新网站时，在博客所在目录执行以下命令即可。 1./deploy.sh 这个 bug 就暂时这么解决吧，有其它问题欢迎留言。]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>博客</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3+JavaScript 动效制作 - 04 Trim Line]]></title>
    <url>%2Fposts%2F1f961ac4%2F</url>
    <content type="text"><![CDATA[CSS3+JavaScript 动效制作这个系列是我自己的动效学习笔记，基于动效周期表的这个项目 Motion Periodic Table 制作，原项目的作者来自日本的 Kazuki Akamine，所有的动效均使用 After Effect 制作。上一篇完成了 Scale 缩放效果，本期我将继续使用 anime.js 库配合 CSS3 来制作周期表中的 Trim Line 裁切线动效。 实现代码及效果如下： 基本样式123456789101112131415161718.square-large &#123; width: 200px; height: 300px; border: 2px solid #BFBFBF; position: relative;&#125;.line &#123; width: 0; height: 16px; float: left; border: none; background: #ffffff; position: absolute; top: 50%; left: 20px; right: auto;&#125; 为了还原动态效果，加入了一个长方形的外框，大小 200×300px，设置了 border 属性。另外一个 div 即为动效的主角 line，初始宽度为 0，高度 16px。剩下的 position、top、left 属性和初始位置有关，位于外框垂直距离的中间，离左侧边框 20px。最后，虽然 float 的默认值是 left，right 默认值为 auto，单独将它们放在代码中是与后面的动效变化有关，我会在后面进行说明。 动效实现123456789101112131415161718192021222324252627282930313233343536373839404142var changeEl = $(".el");var trimLine = anime.timeline(&#123; loop: true&#125;);trimLine .add(&#123; targets: ".el", width: [0, 160], duration: 800, easing: "easeOutQuart", delay: 50 &#125;) .add(&#123; targets: ".el", width: [160, 160], easing: "linear", duration: 800 &#125;) .add(&#123; targets: ".el", width: [160, 0], duration: 800, easing: "easeOutQuart", delay: 50 &#125;) .add(&#123; targets: ".el", width: [0, 0], easing: "linear", duration: 800 &#125;);trimLine.update = function(anim) &#123; if (anim.currentTime &lt; 2500 &amp;&amp; anim.currentTime &gt; 850) &#123; changeEl.css(&#123; float: "right", left: "auto", right: "20px" &#125;); &#125; if (anim.currentTime &gt; 2500) &#123; changeEl.css(&#123; float: "left", left: "20px", right: "auto" &#125;); &#125;&#125;; 首先，分析原始的裁切线动效，整体可分为 2 步，并且可以观察到，每个阶段完成后都有短暂的停顿： Line 从左侧什么都没有的状态，宽度迅速向右增加到 160px，形成一个线条状的正方形； 线条状的正方形的宽度迅速减少，从左向右逐渐减少到 0，再次变为一个什么都没有的状态。 因此，和上一期的动效一样，引入 anime.js 的 Basic Timeline，每个动作包含在一个 .add(...) 中，按顺序执行。除了上述分解的2个步骤，2次停顿也需要一个动作来完成。有了上一期动效的制作经验，line 宽度的变化很简单，由 width 参数控制，停顿的状态宽度不变。而裁切线的动效中，duration 和 delay 的值很重要，需要记录下来参与之后的计算。 裁切线动效的难点在于 line 在后期宽度减少的过程中，方向需要反转，否则动效就仅仅是回到起点。为了实现这一点，需要在合适的时间点改变 line 元素的 float 属性值。我们将 float 设置为 right 后，line 的起点就从靠近左边框变成了靠近右边框，具体的 position 也需要设置对应的 left 和 right 值。 接下来，我们会用到 anime.js 的另一个功能 Callbacks，一共有 4 种：begin，run，update 以及 complete，具体的用法可以参考官方文档。这里我们会用到 update，update 对应的 function 会从动画开始执行的每一帧都会被调用，无视 delay 参数，这一点和 run 是有区别的。我们需要 line 在第 1 次停顿的阶段改变其 float 属性，并且直到第2阶段动作完成，之后在第 2 次停顿阶段将 float 属性再次改回 left，然后进入下一次动效循环。 anim.currentTime 可以返回动画执行的当前时间点，将其返回值大于或小于特定的时间点，执行相应的 function 就可以实现我们需要的功能了。那么，line 在进入第 1 次停顿状态前总共需要 duration + delay = 800 + 50 = 850ms，进入第 2 次停顿状态前，同理计算可得 2500ms。根据上述时间段设置 line 的 float 和 position 参数后，就可以还原原始的裁切线动效了。 下一期我们继续，Peace!]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>JavaScript</tag>
        <tag>动效</tag>
        <tag>前端</tag>
        <tag>裁切线</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在 Minecraft 中创造世界 - 来自 NLT 小组的作品]]></title>
    <url>%2Fposts%2F4d82d2a3%2F</url>
    <content type="text"><![CDATA[Minecraft（我的世界）是一款高自由度的沙盒游戏，风靡全球。最早由瑞典 Mojang AB 开发并于 2009 年 5 月 13 日发行。之后在 2014 年 11 月 6 日被微软收购。整个游戏没有剧情，玩家可以在游戏中自由建设和破坏，透过像素积木对不同的元素进行组合与拼凑，从而制作出小木屋、桥梁甚至整个城市，玩家可以通过自己创造的作品来体验上帝一般的感觉。我自己并没有深入接触过 Minecraft，小时候更喜欢玩的是一些模拟经营类的游戏，比如 Roller Coaster Tycoon（过山车大亨）、疯狂医院、SimCity（模拟城市）等等。虽然如此，我也时不时地在游戏新闻或者视频中看到一些专业玩家在 Minecraft 中创造的各种宏伟的世界和景观。比如魔兽世界的整个艾泽拉斯大陆，又或者是权力的游戏的君临城，这些建造者们都可以称得上 Minecraft 的建筑大神。 而今天想要分享的，是我在浏览订阅新闻时无意中看到的，来自 NLT (Nameless Tag) 工作室的 Minecraft 作品。他们的作品多以视频形式发布，非常注重作品的视觉体验，其中的建筑风格也多种多样，常见东亚、欧美、朋克、机械、玄幻等等，再加上不俗的后期制作，可以说给人很震撼的感觉。我挑选了 NLT 近期发布的几个精彩作品，分享给大家看看。 《三途川》东之幻想初卷 - 浔叶 大陆访客请点击访问 B 站视频 (￣３￣)a 《蜃景城》 大陆访客请点击访问 B 站视频 ╮(￣▽￣)╭ 《厌世园》 大陆访客请点击访问 B 站视频 (￣.￣) 如果你也喜欢 Minecraft 和 NLT 工作室的作品，可以去 B 站或微博支持他们，其中还有「建筑小课堂」系列视频教程，教你在 Minecraft 中造出酷炫的建筑。夜深了，我该去休息了。]]></content>
      <categories>
        <category>好玩</category>
      </categories>
      <tags>
        <tag>Minecraft</tag>
        <tag>游戏</tag>
        <tag>创意</tag>
        <tag>我的世界</tag>
        <tag>建筑</tag>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3+JavaScript 动效制作 - 03 Scale]]></title>
    <url>%2Fposts%2F4881c5ee%2F</url>
    <content type="text"><![CDATA[CSS3+JavaScript 动效制作这个系列是我自己的动效学习笔记，基于动效周期表的这个项目 Motion Periodic Table 制作，原项目的作者来自日本的 Kazuki Akamine，所有的动效均使用 After Effect 制作。上一篇完成了 Move 运动效果，本期我将继续使用 anime.js 库配合 CSS3 来制作周期表中的 Scale 缩放动效。 实现代码及效果如下： 基本样式123456.square &#123; width: 0; height: 0; border: none; background: #ffffff;&#125; 一个简单的 div 元素，初始宽度和高度均为 0px，无 border，背景色设为白色。 动效实现1234567891011121314151617181920212223242526272829303132333435363738394041var scaleSquare = anime.timeline(&#123; loop: true&#125;);scaleSquare.add(&#123; targets: '.el', width: [0, 50], height: [0, 50], duration: 700, easing: 'easeInOutSine', delay: 250&#125;).add(&#123; targets: '.el', width: [50, 200], easing: 'easeInOutSine', duration: 700, delay: 250&#125;).add(&#123; targets: '.el', height: [50, 200], easing: 'easeInOutSine', duration: 700, delay: 250&#125;).add(&#123; targets: '.el', width: [200, 0], height: [200, 0], easing: 'easeInOutSine', duration: 700, delay: 250&#125;).add(&#123; targets: '.el', width: 0, height: 0, duration: 100&#125;) 从原始的缩放动态效果来看，整体分为 4 步，并且我们可以观察到，每个阶段之间都有短暂的停顿： 从什么都没有到一个小正方形； 小正方形的宽度迅速增加，变为一个长方形； 长方形的高度逐渐增加到和宽度一致，变为一个大正方形； 最后，大正方形迅速缩小到什么都没有，动效结束。 因此，使用代码实现动效也需要经过不同的阶段，这里需要引入 anime.js 的 Basic Timeline，在一个动作完成后开始下一个动作，一个动作包含在一个 .add(...) 中，按顺序执行。每个阶段的缩放涉及到 div 元素 width 和 height 的大小变化，例如 width: [0, 50]，表示宽度从 0px 增加至 50px，官方文档见 Specific Initial Value。其它参数的作用在之前的两篇文章中均有提及，duration 表示该动作完成的时间，easing 这里设为 easeInOutSine，符合原动效的速度变化方式，而非一成不变的速度。每个动作开始前也都设有 delay 延时。 在最后，我增加了一个时间极短的动作，保持 div 元素的宽高为 0。如果没有这一条，在开启循环的时候，上一个动作结束后会有大小为 200×200px 的正方形一闪而过，我不太确定这是否是 anime.js 的 bug，希望有高手能解答。因此，我在最后正方形缩小到没有之后，增加了上述动作，才得以还原原始的缩放动效。 到此，缩放效果就完成了，可以参考周期表页面的应用内容尝试做更复杂的动效。 下一期我们继续。Peace!]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>JavaScript</tag>
        <tag>动效</tag>
        <tag>前端</tag>
        <tag>缩放</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3+JavaScript 动效制作 - 02 Move]]></title>
    <url>%2Fposts%2F3246e3bb%2F</url>
    <content type="text"><![CDATA[CSS3+JavaScript 动效制作这个系列是我自己的动效学习笔记，基于动效周期表的这个项目 Motion Periodic Table 制作，原项目的作者来自日本的 Kazuki Akamine，所有的动效均使用 After Effect 制作。上一篇完成了 Orbit 轨道旋转这一基础动效，今天我使用代码来制作周期表中的 Move 运动效果。 实现代码及效果如下： 基本样式12345678910111213141516171819.square-large &#123; width: 192px; height: 300px; border: 2px solid #BFBFBF; outline: 64px solid #464343; position: relative; z-index: 100;&#125;.square &#123; width: 32px; height: 32px; border: none; background: #ffffff; position: absolute; top: 50%; left: 198px; z-index: 90;&#125; 以上是两个方形的样式代码，当运动的方形移动到边缘后，超出的部分需要隐藏。这里我使用了一个简单的方法，为外框元素增加 outline 属性，颜色与背景相同。同时为两个方形都增加 z-index，外框赋值大于运动方块，这样就能遮盖超出的部位，之后只要大致计算方形的运动距离即可。 动效实现12345678var moveSquare = anime(&#123; targets: '.square', translateX: -240, duration: 1500, easing: 'linear', loop: true, delay: 600&#125;); 通过调用 anime.js 的方法可以轻松实现该效果。targets 定位到 square 的 div 元素。translateX 代表向左横向移动 240px，duration 用于控制动作的快慢。easing 需设为线性移动 linear，从头到尾都是同样的速度。loop 设置是否循环动作。最后，原动效中方块移动至左边缘后并没有立即出现在右边，因此加入了 delay，使循环的动作有一定的延迟。 到此，物体平移的运动效果就完成了，可以参考周期表页面的应用内容尝试做更复杂的动效。 下一期我们继续。Peace!]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>JavaScript</tag>
        <tag>动效</tag>
        <tag>前端</tag>
        <tag>物体移动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[没有胶卷的随拍 - 悉尼歌剧院和海港大桥]]></title>
    <url>%2Fposts%2Fa6aaed40%2F</url>
    <content type="text"><![CDATA[昨天周日，去著名的华人区 Burwood 帮朋友问了下奶粉的价格，不过大概是嫌价格太贵，最后没买，所以很多时候做点小的代购是吃力不讨好的事情。之后就跑去歌剧院（Opera House）附近走走，旁边就是悉尼皇家植物园（Royal Botanic Gardens），加上悉尼宜人的气候，每天都有很多市民和游客到这里散步观光。习惯性的，沿着自己行走的路线，看到不错的风景，就拿出 iPhone 拍了起来。 随拍路线途径悉尼歌剧院，进入皇家植物园，沿着岸边一路前行至麦考里夫人座椅（Mrs Macquarie’s Chair）。在这里，可以回望整个悉尼市区，是一个不错的观景点。路上能看见天空中厚厚的积雨云正向着悉尼市区移动，果不其然，傍晚开始下雨，温度骤降，不过很快就停了。这就是悉尼的冬季，少雨，但白天和晚上的温差很大。]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>悉尼</tag>
        <tag>随拍</tag>
        <tag>风景</tag>
        <tag>摄影</tag>
        <tag>海港</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3+JavaScript 动效制作 - 01 Orbit]]></title>
    <url>%2Fposts%2F872af450%2F</url>
    <content type="text"><![CDATA[CSS3 和 JavaScript 已广泛应用于网页和前端相关的动态效果开发以及 App 的原型演示工具中。CSS 作为最轻盈灵巧的前端动效实现方式，借助 Translate, Transform, Scale, Position, Easing 等可以快速实现多种动画和过渡效果。虽然有其自身的局限，比如不能操控 Dom 节点，监控事件等需要追踪事件的交互行为，因此在很多场景应用中需结合 Javascript 来达到完善的动效。 我接触动效开发的时间不长，目前仍然处于初期的学习阶段，而 CSS3+JavaScript 动效制作这个系列即作为我自己的动效学习笔记。在不久之前，我发现了一个动效周期表的网站项目 Motion Periodic Table，来自日本的 Kazuki Akamine，很有意思的动效元素表，作者的动效均使用 After Effect 制作。 动效制作学习笔记是从上述周期表中抽取不同的元素，使用 CSS3 和 JavaScript 实现同样的动态效果。我们从表中可以看到，动态的难度并不是顺序排列的，因此制作的动效会先从简单的入手，逐渐增加难度。同时，我会在每篇笔记中记录代码实现的过程，这也可以算作是入门的教程吧。 JS 在 Web 中的应用很广，我引入了一个较为流行的开源项目 anime.js 用于动效的快速开发，在代码的编写上更为简洁明了。 Orbit第一个基础动效 Orbit 轨道旋转，如下图所示，一个小球绕着大的圆形轨道运动，是最常见的动效之一。 实现代码及效果如下： 基本样式1234567891011121314151617181920212223.circle &#123; background-color: #464343; display: block; border-radius: 50%;&#125;.circle-1 &#123; width: 200px; height: 200px; border: 2px solid #BFBFBF; position: relative;&#125;.circle-2 &#123; width: 32px; height: 32px; border: none; background: #ffffff; position: absolute; top: 0; left: 50%; margin: -16px 0 0 -16px;&#125; 以上是与两个球形相关的样式代码。大的球形作为运动轨道，背景色与页面背景相同，加入 2px 的 border；小球使用单纯的白色。这里当 circle-1 的 position 为 relative，其子元素 circle-2 的 position 设为 absolute，那么 circle-2 的位置将相对于 circle-1 变化，因此 top: 0; left: 50%，margin 的偏移量为其半径的负值，即可将 circle-2 的起始位置设为运动轨道的正上方。 动效实现接下来是让小球动起来，围绕大球的中心旋转。实现方法至少应有 2 种，一种是通过计算小球在运动轨道上的运动位置，然后根据计算结果设置小球的 top、left 数值，达到移动效果，这种方法需要用到一些数学公式；另一种实现起来更加简单，将大球小球视为一个整体，整体旋转 360 度即可，我使用的是该方法。 1234567var orbit = anime(&#123; targets: '.orbit', rotate: 360, duration: 5000, easing: 'linear', loop: true&#125;); 通过调用 anime.js 的方法可以轻松实现该效果。targets 用于定位包含了 circle-1 和 circle-2 的 div 元素，即之前所说的整体。rotate 为旋转的动作，duration 用于控制动作的快慢，数值越大，完成动作的时间就越长。easing 需设为线性移动 linear，从头到尾都是同样的速度。其它预设移动如 ease-in 为开始的速度慢，之后逐渐变为正常速度，相关内容可以参考 CSS3 animation-timing-function Property。最后，loop 设置是否循环动作。 到此，第一个简单的轨道运动效果完成了，可以参考周期表页面的应用内容实现更复杂的效果。 下一期我们继续。]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>JavaScript</tag>
        <tag>动效</tag>
        <tag>前端</tag>
        <tag>轨道旋转</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建 Hexo 博客的填坑经历和必要的优化]]></title>
    <url>%2Fposts%2Fb706980b%2F</url>
    <content type="text"><![CDATA[使用 Hexo 这一静态博客框架可以快速搭建并生成自己的博客，同时也可以使用很多优秀的 Theme。但在实际搭建过程中我也遇到了各种奇怪的错误，而官方针对开发的文档信息十分有限，当需要对主题中的源文件进行自定义时，可以参考的很少。写这篇文章的目的就是趁着博客刚刚搭建起来，整理所遇到的问题，并给出解决方案，以及一些优化建议等，也欢迎各位读者进行补充，可以在下方留言给我。 注意： _config.yml 文件在网站项目下有两个，一个在项目根目录下，另一个在主题目录下，文中会标注，注意分辨； 本博客使用的是 next 主题，某些设置和修改与该主题有关。 自定义主菜单及其页面显示这一条同时也跟 next 主题 GitHub 项目中的 issue #1778 相关，虽然该问题已经关闭，但从回答的内容上来看并没有解决。next 主题默认有“首页”、“归档”、“分类”、”标签“、“关于”等页面，可以通过调整主题配置文件 _config.yml 中的 menu 参数启用或关闭。当我们启用“分类”页面后，如果博客中有相关的文章并标注了分类，该页面显示的是分类的统计信息，包括一共有几个分类；点击其中一个分类，进入的页面样式和“归档”页面相同，以时间线排列，仅显示发布时间以及标题或图片。 而我实际想要的是，首页显示所有发布的文章，增加的自定义菜单是不同的文章分类，例如我的博客有程序猿、创意集和碎碎念 3 个分类。点击每个分类菜单，页面显示的内容样式应该和首页相同，但仅为该分类下的所有文章。归档样式保持默认不变，显示的是时间线。 通过对主题的源码进行分析，需要进行的修改如下： 增加自定义菜单（文章分类），编辑主题配置文件 _config.yml 中的 menu，例如： 123456menu: home: / programming: /categories/programming/ creatives: /categories/creatives/ dailylife: /categories/dailylife/ archives: /archives/ 增加中文翻译，假设网站使用简体中文，编辑主题目录 /languages/zh-Hans.yml，在 menu 中增加： 123programming: 程序猿creatives: 创意集dailylife: 碎碎念 编辑 category_map 以设置 url slug，编辑站点配置文件 _config.yml 中的 category_map，例如： 1234category_map: 程序猿: programming 创意集: creatives 碎碎念: dailylife 修改分类页面样式，编辑主题目录 /layout/category.swig，删除所有代码，修改为： 12345678910111213141516171819&#123;% extends '_layout.swig' %&#125;&#123;% import '_macro/post.swig' as post_template %&#125;&#123;% import '_macro/sidebar.swig' as sidebar_template %&#125;&#123;% block title %&#125;&#123;&#123; __('title.category') &#125;&#125;: &#123;&#123; page.category &#125;&#125; | &#123;&#123; config.title &#125;&#125;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;section id="posts" class="posts-expand"&gt; &#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endfor %&#125; &lt;/section&gt; &#123;% include '_partials/pagination.swig' %&#125;&#123;% endblock %&#125;&#123;% block sidebar %&#125; &#123;&#123; sidebar_template.render(false) &#125;&#125;&#123;% endblock %&#125; 保存修改后就大功告成了，hexo clean &amp;&amp; hexo g &amp;&amp; hexo server 之后，即可预览网站查看新增的分类菜单，并且分类页面的显示效果和首页一致。 在编辑新的 post 时，一定要在 Front-matter 中增加定义好的分类信息。 文章链接唯一化Hexo 默认的文章链接包含文章的发布时间和标题，但我们可能会数次修改文章标题或者变更发布时间，这种情况下，文章的 url 会发生改变，不利于搜索引擎收录，也不利于分享。通过 hexo-abbrlink 插件生成唯一的永久链接是更好的选择。需要注意的是，安装此插件后，不要在 hexo s 模式下更改文章文件名，否则文章将成空白。 1npm install hexo-abbrlink --save 在站点配置文件 _config.yml 中查找代码 permalink:，将其更改为: 1permalink: posts/:abbrlink/ # “posts/” 可自行更换 在站点配置文件 _config.yml 中添加如下代码： 1234# Abbrlink Configabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 插件文档说明参考：hexo-abbrlink 搜索引擎优化添加网站地图为网站添加 sitemap 需要安装以下插件： 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 在站点配置文件 _config.yml 中添加如下代码： 12345# hexo sitemap sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 配置成功后，会生成 sitemap.xml 和 baidusitemap.xml，前者适合提交给 Google，后者适合提交百度。其次，在 robots.txt 中添加下面的一段代码，请替换自己网站的域名： 12Sitemap: http(s)://xxx.xxx/sitemap.xmlSitemap: http(s)://xxx.xxx/baidusitemap.xml 如果博客是托管在 GitHub 上，无需安装适用于百度的网站地图。因为一些不可描述的原因，GitHub 屏蔽了来自百度的抓取。 插件文档说明参考：hexo-generator-sitemap，hexo-generator-baidu-sitemap 添加蜘蛛协议robots.txt 放置在网站项目 \source 目录下。 123456789101112#hexo robots.txtUser-agent: *Allow: /Allow: /archives/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /fancybox/Sitemap: http(s)://xxx.xxx/sitemap.xmlSitemap: http(s)://xxx.xxx/baidusitemap.xml 限制出站链接网络爬虫会在当前页面搜索所有的链接，故有可能跳到别的网站。nofollow 标签是由 Google 开发的“反垃圾链接”标签，现已被百度、Yahoo、Bing 等各大搜索引擎广泛支持，引用 nofollow 标签的目的在于指示搜索引擎不要追踪（即抓取）网页上带有 nofollow 属性的任何出站链接，以减少垃圾链接的分散网站权重。安装插件： 1npm install hexo-autonofollow --save 在站点配置文件 _config.yml 中添加如下代码： 123456# Nofollow Confignofollow: enable: true # exclude: # 例外的链接，可将友情链接放置此处，请同时去掉注释 # - exclude1.com # - exclude2.com 这样网站中所有的外链全部会自动带上 nofollow 标签。 插件说明文档请参考：hexo-autonofollow 结语在博客的搭建过程中，一些细节的调整还有不少，就不在这里一一描述了。请使用 Hexo 的朋友仔细阅读官方的文档以及 next 主题的说明文档，如果你还有其它问题，可以在下方给我留言。]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[特殊的旅行手账 —— 30 天 30 个 GIF]]></title>
    <url>%2Fposts%2F93fb6f83%2F</url>
    <content type="text"><![CDATA[很多人热爱旅行，也喜欢记录和分享旅行中有趣的人和事。一台轻便的数码相机、或者更常见的智能手机，都是我们不可或缺的记录工具。而今天给大家分享的是以为来自英国伦敦的动画师 James Curran，他擅长制作扁平化的动画，创作了「城市 Gifathon」系列。James 分别在东京、洛杉矶和纽约待满30天，每天创作一幅 GIF 动图，记录旅行。 在 James 笔下，主角留着一脸络腮胡，一双大长腿，在各个城市展开他的“大冒险”。动画里，熟悉的城市印象向我们依次铺开。举个栗子，在 东京 中，有樱花、寿司、拉面、自动贩卖机、筑地市场、哥斯拉等等等等。在洛杉矶，你可以看到星光大道、玉米卷和很多很多的汽车。而纽约有什么呢？帝国大厦，还有街头大游行等等。所有的东西在 James 的脑洞之下都表现得妙趣横生，让我们一起随着他的视角走遍这些城市。 东京 Tokyo Gifathon 大陆访客请点击访问 B 站视频 (￣３￣)a 洛杉矶 LA Gifathon 大陆访客请点击访问 B 站视频 ╮(￣▽￣)╭ 纽约 NYC Gifathon 大陆访客请点击访问 B 站视频 (￣.￣)]]></content>
      <categories>
        <category>好玩</category>
      </categories>
      <tags>
        <tag>动效设计</tag>
        <tag>GIF</tag>
        <tag>旅行</tag>
        <tag>After Effect</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[5个前端动效实例分享（08/2017）]]></title>
    <url>%2Fposts%2Fc84f9c9e%2F</url>
    <content type="text"><![CDATA[之前从事了很短一段时间的前端开发，加上自己一直喜欢视觉的东西，对于动效开发很感兴趣。常见的 UI 动效设计应用在各种 App 中能让用户体验更加舒适顺畅，也很受设计师的欢迎。但是作为前端开发来说，用代码实现各种动态效果却有相当的难度。要掌握一定的设计语言和工具，使用一些高效的动效库来帮助完成开发等。我目前还处于入门阶段，这一期先分享几个来自 CodePen 的动效设计，不仅有 2D 的平面动效，代码也能实现复杂的 3D 效果。之后的计划是先从简单的项目实例开始，分析和拆解代码，掌握不同动效的实现方式，我也会尝试把代码的解析步骤写成笔记发布到博客上来。 Space Elevator by Eslam Yahya Canvas Orbital Trails by Jack Rugile Ouroborosvg by kittons CSS 3D Solar System by Julian Garnier Chill the lion by Karim Maaloul]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>JavaScript</tag>
        <tag>前端开发</tag>
        <tag>动效设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[广告有深度 - The Art of J]]></title>
    <url>%2Fposts%2Fad35d0f3%2F</url>
    <content type="text"><![CDATA[本期视频分享来自日本航空公司 Japan Airlines 出品的创意广告，分为 3 个部分，分别向用户传达 Precision 精度、Privacy 隐私、和 Connections 连结 的概念，用极致的美学表现日本的传统文化。也许你也会跟我一样，被广告中的一些地方惊艳到。当我前几天把广告分享到朋友圈时，我的表弟回复我说，它家的机票贵死。这是事实，所以我们看看广告就好。 Precision 精度 大陆访客请点击访问 B 站视频 (￣３￣)a Privacy 隐私 大陆访客请点击访问 B 站视频 ╮(￣▽￣)╭ Connections 连结 大陆访客请点击访问 B 站视频 (￣.￣)]]></content>
      <categories>
        <category>好玩</category>
      </categories>
      <tags>
        <tag>广告</tag>
        <tag>日本</tag>
        <tag>创意广告</tag>
        <tag>美学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重开博客的一些想法]]></title>
    <url>%2Fposts%2F2263897844%2F</url>
    <content type="text"><![CDATA[2016年，因为找工作的缘故，我在 GitHub Pages 上建立了自己的独立博客，使用的是 Ghost 这一基于 Node.js 的开源博客平台。其一，界面简洁，虽然初始的配置和部署有一些坑，填上以后还是可以很舒服地专注写作。其二，熟悉一些网站搭建、维护所需要的一些基本知识，以及自己在填坑过程中累积到不少经验和技巧。最后的项目成品也让我顺利地找到了第一份工作，主要做前端开发，同时还有服务器的运维以及 SEO 的工作。 在那之前，其实自己很少写长的文章，也仅仅是混迹于微博、微信朋友圈一类的，有空的时候发发心情、照片，还有分享一些有趣的东西，也是自得其乐。这些伴随着自己在澳洲的学习时光，而工作开始后博客也停更了，原因无非是工作占据了太多的时间，让我不再想安静地坐下来思考和写作。这么一段时间过去后，因为专注的时间少了，也没有真正意义上的记录，让现在的我无法总结和梳理自己的经历，缺乏经验但又没有找到提高的途径。所以，再一次的，重新开始写博客，强迫自己养成良好的记录习惯，也能更好地了解自己。 开篇个人博客依然是最合适的个人展示网站，而为了能够将更多的时间花在写上面，再考虑成本的因素，我没有选择在虚拟主机（VPS）上搭建动态博客，而作为程序猿中的一员，我也暂不考虑使用门户网站的博客平台，所以依然选择静态博客，使用 Hexo + GitHub Pages 的组合搭建，也购买了一个域名。当然，使用静态博客缺点还是不少。首先，要根据自己的需求对 Hexo 进行配置和源文件的修改，内容管理也较为麻烦；更不用说要熟悉 Git 和 Markdown 语言进行网站的部署和写作。 关于如何使用 Hexo 搭建博客网上已有很多教程，我之后会写一两篇自己在搭建过程中发现的问题和优化的心得，以及对 Next 主题一些定制部分内容进行解说。 写什么呢按照现阶段的想法，博客的版块包括： 程序猿：记录编程开发心得、分享优秀代码。 创意集：你在这个版块能发现有趣的活动、创意广告、产品、插画等内容。 碎碎念：顾名思义，自己的日常生活记录，除了发发牢骚，偶尔我也会到处溜达，随处拍一些照片来分享。 我发现自己真的是视觉系，所以以后更新的博客内容不会只有大段的文字，各位可以根据自己的喜好浏览不同的版块。其实本来还有一个版块的，但是因为一些原因无法加入，放在最后一起说吧。 一些遗憾如上，在博客的搭建过程中，我本来还想加入一个版块，每周做 2-3 篇 60-Second Science Podcast 的英文翻译，一方面是现在越发需要持之以恒地提高自己的英语水平，通过好的素材提高听力和积累词汇；另一方面也是想要分享好的东西给大家，一举两得。最后没有加入的原因，是由于音频文件无法直接外链，如果单独下载回来，我需要一个稳定的服务器空间存放，而这就会产生费用。虽然有一些云空间服务有免费的额度，但是随着时间的推移，需要存储的文件数量也会越来越多，访客访问文件的次数增加等都会产生更多的费用。目前我还需要节省一些，所以这个版块就暂时搁置，以后有条件再加入。 第二个问题即是涉及网站的访问速度了，众所周知，因为 GFW 的存在，国外很多服务国内用户都无法使用。GitHub 其实也算在列，从国内访问的速度非常的慢，我本想使用国内云服务商七牛提供的 CDN 加速功能，奈何想要启用该功能，所使用的网站域名必须在国内备案，也就意味着网站内容会被审查，我只能作罢。目前单纯使用七牛做图床，先看看效果再说。 最后博客上线前，也陆续补充了必要的功能，调整了不少细节。由于静态页面的限制，评论和网页分享均需要使用第三方服务。经过一番比较和探索，评论功能使用的是使用的是来自韩国的 Livere 来必力，希望没有被墙。网页分享也是必备的功能之一，Next 主题集成的 JiaThis 和百度分享我都不大喜欢，替换为 Mob ShareSDK。]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>心得</tag>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
